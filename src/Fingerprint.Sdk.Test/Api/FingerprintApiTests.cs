/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Net;
using System.Text;
using Fingerprint.Sdk.Api;
using Fingerprint.Sdk.Client;
using Fingerprint.Sdk.Model;

namespace Fingerprint.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing FingerprintApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FingerprintApiTests
    {
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Console.WriteLine("Starting server...");

            // Start simple HTTP server
            mockServer = new HttpListener();
            mockServer.Prefixes.Add(serverUrl);
            mockServer.Start();

            HandleConnection().GetAwaiter();

            Console.WriteLine("Started server");

            var config = new Configuration
            {
                BasePath = serverUrl
            };

            instance = new FingerprintApi(config);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            Console.WriteLine("Closing server.");

            requests.Clear();
            mockServer!.Close();
        }

        private const string serverUrl = "http://127.0.0.1:8080/";

        private FingerprintApi? instance;

        private HttpListener? mockServer;

        private readonly List<HttpListenerRequest> requests = new List<HttpListenerRequest>();

        private byte[]? mockResponseBytes;

        private void SetupMockResponse(string fileName)
        {
            // Load selected json file store in /mocks directory, and save it to a "mockResponse" property

            var mockResponse = File.ReadAllText($"../../../mocks/{fileName}");

            mockResponseBytes = Encoding.UTF8.GetBytes(mockResponse);
        }

        private async Task HandleConnection()
        {
            while (mockServer != null)
            {
                var ctx = await mockServer.GetContextAsync();

                // Peel out the requests and response objects
                var req = ctx.Request;
                var resp = ctx.Response;

                requests.Add(req);

                // Print out some info about the request
                Console.WriteLine(req.Url?.ToString());
                Console.WriteLine(req.HttpMethod);
                Console.WriteLine(req.UserHostName);
                Console.WriteLine(req.UserAgent);
                Console.WriteLine();

                if (mockResponseBytes != null)
                {
                    resp.ContentType = "application/json";
                    resp.ContentEncoding = Encoding.UTF8;
                    resp.ContentLength64 = mockResponseBytes.LongLength;

                    await resp.OutputStream.WriteAsync(mockResponseBytes);
                }

                resp.Close();
            }
        }

        /// <summary>
        /// Test an instance of FingerprintApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.That(instance, Is.InstanceOf(typeof(FingerprintApi)), "instance is a FingerprintApi");
        }

        /// <summary>
        /// Test GetEvent
        /// </summary>
        [Test]
        public void GetEventTest()
        {
            SetupMockResponse("get_event.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventResponse>(), "response is EventResponse");

                var request = requests[0];

                Assert.That(request.Url?.ToString(), Is.EqualTo($"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2F{FingerprintApi.Version}"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
                Assert.That(response.Products.Identification.Data.RequestId, Is.EqualTo(requestId));
            });
        }

        /// <summary>
        /// Test GetVisits
        /// </summary>
        [Test]
        public void GetVisitsLimit1Test()
        {
            SetupMockResponse("visits_limit_1.json");

            const string visitorId = "AcxioeQKffpXF8iGQK3P";
            const string requestId = "1655373953086.DDlfmP";
            const string? linkedId = null;
            int? limit = 1;
            int? before = null;

            var response = instance.GetVisits(visitorId, requestId, linkedId, limit, before);

            Assert.Multiple(() =>
            {
                Assert.That(requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<Response>(), "response is Response");
                Assert.That(response.VisitorId, Is.EqualTo(visitorId));
                Assert.That(response.Visits, Has.Count.EqualTo(1));

                var request = requests[0];

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/visitors/{visitorId}?ii=fingerprint-pro-server-api-dotnet-sdk%2F{FingerprintApi.Version}&request_id={requestId}&limit={limit}"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
            });
        }
    }
}