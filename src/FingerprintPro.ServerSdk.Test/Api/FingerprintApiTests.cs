/*
 * Fingerprint Server API
 *
 * Fingerprint Server API allows you to search, update, and delete identification events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Globalization;
using System.Net;
using System.Text;
using System.Text.Json;
using FingerprintPro.ServerSdk.Api;
using FingerprintPro.ServerSdk.Client;
using FingerprintPro.ServerSdk.Json;
using FingerprintPro.ServerSdk.Model;
using FingerprintPro.ServerSdk.Test.Utils;

namespace FingerprintPro.ServerSdk.Test.Api
{
    internal class ApiRequest
    {
        public HttpListenerRequest Request;

        public string? Body;
    }

    /// <summary>
    ///  Class for testing FingerprintApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FingerprintApiTests
    {
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Console.WriteLine("Starting server...");

            // Start simple HTTP server
            _mockServer = new HttpListener();
            _mockServer.Prefixes.Add(_serverUrl);
            _mockServer.Start();

            _mockResponseHeaders = new WebHeaderCollection();
            _mockResponseStatusCode = (int)HttpStatusCode.OK;

            HandleConnection().GetAwaiter();

            Console.WriteLine("Started server");

            var httpClient = new HttpClient
            {
                BaseAddress = new Uri(_serverUrl)
            };

            var config = new Configuration("123")
            {
                HttpClient = httpClient
            };

            _instance = new FingerprintApi(config);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            Console.WriteLine("Closing server.");

            _requests.Clear();
            _mockServer!.Close();
        }

        private const string _serverUrl = "http://127.0.0.1:8080/";

        private FingerprintApi? _instance;

        private HttpListener? _mockServer;

        private readonly List<ApiRequest> _requests = [];

        private byte[]? _mockResponseBytes;

        private WebHeaderCollection? _mockResponseHeaders;

        private int? _mockResponseStatusCode;

        private T GetMockResponse<T>()
        {
            return JsonUtils.Deserialize<T>(Encoding.UTF8.GetString(_mockResponseBytes!))!;
        }

        private void SetupMockResponse(string fileName)
        {
            _mockResponseBytes = MockLoader.Load(fileName);
        }

        private async Task HandleConnection()
        {
            while (_mockServer != null)
            {
                var ctx = await _mockServer.GetContextAsync();

                // Peel out the requests and response objects
                var req = ctx.Request;
                var resp = ctx.Response;

                var body = "";

                if (req.HasEntityBody)
                {
                    using var reader = new StreamReader(req.InputStream, req.ContentEncoding);

                    body = await reader.ReadToEndAsync();
                }

                _requests.Add(new ApiRequest()
                {
                    Request = req,
                    Body = body
                });

                // Print out some info about the request
                Console.WriteLine(req.Url?.ToString());
                Console.WriteLine(req.HttpMethod);
                Console.WriteLine(req.UserHostName);
                Console.WriteLine(req.UserAgent);
                Console.WriteLine();

                resp.StatusCode = _mockResponseStatusCode ?? (int)HttpStatusCode.OK;


                if (_mockResponseHeaders != null)
                {
                    foreach (var key in _mockResponseHeaders.AllKeys)
                    {
                        var value = _mockResponseHeaders[key];

                        if (value != null)
                        {
                            resp.AddHeader(key, value);
                        }
                    }
                }

                if (_mockResponseBytes != null)
                {
                    resp.ContentType = "application/json";
                    resp.ContentEncoding = Encoding.UTF8;
                    resp.ContentLength64 = _mockResponseBytes.LongLength;

                    await resp.OutputStream.WriteAsync(_mockResponseBytes);
                }

                resp.Close();
            }
        }

        /// <summary>
        /// Test an instance of FingerprintApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.That(_instance, Is.InstanceOf(typeof(FingerprintApi)), "instance is a FingerprintApi");
        }

        [Test]
        public void FallbackToBaseUrlFromConfigurationIfClientIsProvidedWithEmptyAddress()
        {
            SetupMockResponse("get_event_200.json");

            var config = new Configuration("123")
            {
                BasePath = _serverUrl,
                DefaultHeader = new Dictionary<string, string>
                {
                    { "x-test-header", "test" }
                },
                HttpClient = new HttpClient()
            };

            const string requestId = "1708102555327.NLOjmg";

            _instance = new FingerprintApi(config);
            _instance!.GetEvent(requestId);

            Assert.That(_requests, Has.Count.EqualTo(1));
        }

        [Test]
        public void HeadersFromConfigurationTest()
        {
            SetupMockResponse("get_event_200.json");

            var config = new Configuration("123")
            {
                BasePath = _serverUrl,
                DefaultHeader = new Dictionary<string, string>
                {
                    { "x-test-header", "test" }
                }
            };

            const string requestId = "1708102555327.NLOjmg";

            _instance = new FingerprintApi(config);
            _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("x-test-header"), Is.EqualTo("test"));
            });
        }

        [Test]
        public void CustomHttpClientTest()
        {
            SetupMockResponse("get_event_200.json");

            var client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-test-header", "test");
            client.BaseAddress = new Uri(_serverUrl);

            var config = new Configuration("123")
            {
                HttpClient = client
            };

            const string requestId = "1708102555327.NLOjmg";

            _instance = new FingerprintApi(config);
            _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("x-test-header"), Is.EqualTo("test"));
            });
        }

        [Test]
        public void GetEventTest()
        {
            SetupMockResponse("get_event_200.json");

            const string requestId = "1708102555327.NLOjmg";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
                Assert.That(response.Products.Identification.Data.RequestId, Is.EqualTo(requestId));
                Assert.That(response.Products.IpInfo.Data.V4.Address, Is.EqualTo("94.142.239.124"));
                Assert.That(response.Products.ClonedApp.Data.Result, Is.False);
                Assert.That(response.Products.Emulator.Data.Result, Is.False);
                Assert.That(response.Products.FactoryReset.Data.Timestamp, Is.EqualTo(0));
                Assert.That(response.Products.Frida.Data.Result, Is.False);
                Assert.That(response.Products.Incognito.Data.Result, Is.False);
                Assert.That(response.Products.IpBlocklist.Data.Result, Is.False);
                Assert.That(response.Products.IpBlocklist.Data.Details.AttackSource, Is.False);
                Assert.That(response.Products.IpBlocklist.Data.Details.EmailSpam, Is.False);
                Assert.That(response.Products.Jailbroken.Data.Result, Is.False);
                Assert.That(response.Products.PrivacySettings.Data.Result, Is.False);
                Assert.That(response.Products.Proxy.Data.Result, Is.True);
                Assert.That(response.Products.Proxy.Data.Details, Is.Not.Null);
                Assert.That(response.Products.Proxy.Data.Details.ProxyType, Is.EqualTo(ProxyDetails.ProxyTypeEnum.Residential));
                Assert.That(response.Products.Proxy.Data.Details.LastSeenAt, Is.InstanceOf<DateTime>());
                Assert.That(response.Products.RootApps.Data.Result, Is.False);
                Assert.That(response.Products.Tampering.Data.Result, Is.False);
                Assert.That(response.Products.Tor.Data.Result, Is.False);
                Assert.That(response.Products.VirtualMachine.Data.Result, Is.False);
                Assert.That(response.Products.Vpn.Data.Result, Is.False);
                Assert.That(response.Products.ClonedApp.Data.Result, Is.False);
                var factoryResedExpectedTime = DateTime.Parse("1970-01-01T00:00:00Z", CultureInfo.InvariantCulture,
                    DateTimeStyles.AdjustToUniversal);
                Assert.That(response.Products.FactoryReset.Data.Time, Is.EqualTo(factoryResedExpectedTime));
                Assert.That(response.Products.Jailbroken.Data.Result, Is.False);
                Assert.That(response.Products.Frida.Data.Result, Is.False);
                Assert.That(response.Products.PrivacySettings.Data.Result, Is.False);
                Assert.That(response.Products.VirtualMachine.Data.Result, Is.False);
                var rawDeviceAttributes = response.Products.RawDeviceAttributes.Data;
                Assert.That(rawDeviceAttributes.ContainsKey("colorGamut"), Is.True);
                Assert.That(rawDeviceAttributes["colorGamut"], Is.Not.Null);
                Assert.That(rawDeviceAttributes["colorGamut"].Value.ToString(), Is.EqualTo("p3"));
                var colorGamut = rawDeviceAttributes["colorGamut"].Value;
                Assert.That(colorGamut.Value.ToString(), Is.EqualTo("p3"));
                var canvas = rawDeviceAttributes["canvas"].Value;
                Assert.That(canvas.Value.GetProperty("Geometry").ToString(),
                    Is.EqualTo("4dce9d6017c3e0c052a77252f29f2b1c"));
            });
        }

        [Test]
        public void GetEventWithExtraFieldsTest()
        {
            SetupMockResponse("get_event_200_extra_fields.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
                Assert.That(response.Products.Identification.Data.RequestId, Is.EqualTo(requestId));
            });
        }

        [Test]
        public void GetEvenAllErrorsTest()
        {
            SetupMockResponse("get_event_200_all_errors.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
                Assert.That(response.Products.Identification.Error.Code,
                    Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Botd.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.IpInfo.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Incognito.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.RootApps.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Emulator.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.IpBlocklist.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Tor.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Vpn.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Proxy.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Tampering.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.ClonedApp.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.FactoryReset.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Jailbroken.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.Frida.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.PrivacySettings.Error.Code, Is.EqualTo(ErrorCode.Failed));
                Assert.That(response.Products.VirtualMachine.Error.Code, Is.EqualTo(ErrorCode.Failed));
                var rawDeviceAttributes = response.Products.RawDeviceAttributes.Data;
                Assert.That(rawDeviceAttributes.ContainsKey("audio"), Is.True);
                Assert.That(rawDeviceAttributes["audio"], Is.Not.Null);
                var audio = rawDeviceAttributes["audio"];
                var audioError = audio.Error;
                Assert.That(audioError.Name, Is.EqualTo("Error"));
                Assert.That(rawDeviceAttributes.ContainsKey("canvas"), Is.True);
                Assert.That(rawDeviceAttributes["canvas"], Is.Not.Null);
                var canvas = rawDeviceAttributes["canvas"];
                var canvasError = canvas.Error;
                Assert.That(canvasError.Name, Is.EqualTo("Error"));
            });
        }

        [Test]
        public void GetEventBotdErrorTest()
        {
            SetupMockResponse("get_event_200_botd_failed_error.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");
                Assert.That(response.Products.Botd.Error.Code, Is.EqualTo(ErrorCode.Failed));
            });
        }

        [Test]
        public void GetEventAllErrorsTest()
        {
            SetupMockResponse("get_event_200_all_errors.json");
            var mockResponse = JsonUtils.Deserialize<EventsGetResponse>(Encoding.UTF8.GetString(_mockResponseBytes!));

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");
                Assert.That(response, Is.EqualTo(mockResponse));
            });
        }

        [Test]
        public void GetEventBotdFailedErorTest()
        {
            SetupMockResponse("get_event_200_botd_failed_error.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");
                Assert.That(response.Products.Botd.Error.Code, Is.EqualTo(ErrorCode.Failed));
            });
        }

        [Test]
        public void GetEventIdentificationErrorTest()
        {
            SetupMockResponse("get_event_200_identification_failed_error.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");
                Assert.That(response.Products.Identification.Error.Code,
                    Is.EqualTo(ErrorCode.Failed));
            });
        }

        [Test]
        public void GetEventIdentificationFailedErrorTest()
        {
            SetupMockResponse("get_event_200_identification_failed_error.json");

            const string requestId = "0KSh65EnVoB85JBmloQK";
            var response = _instance!.GetEvent(requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<EventsGetResponse>(), "response is EventsGetResponse");
                Assert.That(response.Products.Identification.Error.Code,
                    Is.EqualTo(ErrorCode.Failed));
            });
        }

        /// <summary>
        /// Test GetVisits
        /// </summary>
        [Test]
        public void GetVisitsLimit1Test()
        {
            SetupMockResponse("get_visitors_200_limit_1.json");

            const string visitorId = "AcxioeQKffpXF8iGQK3P";
            const string requestId = "1655373953086.DDlfmP";
            const string? linkedId = null;
            int? limit = 1;

            var response = _instance!.GetVisits(visitorId, requestId, linkedId, limit);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<VisitorsGetResponse>(), "response is VisitorsGetResponse");
                Assert.That(response.VisitorId, Is.EqualTo(visitorId));
                Assert.That(response.Visits, Has.Count.EqualTo(1));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/visitors/{visitorId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&request_id={requestId}&limit={limit}&api_key=123"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
            });
        }

        /// <summary>
        /// Test GetVisits
        /// </summary>
        [Test]
        public void GetVisitsLimit500Test()
        {
            SetupMockResponse("get_visitors_200_limit_500.json");

            const string visitorId = "AcxioeQKffpXF8iGQK3P";
            const string requestId = "1655373953086.DDlfmP";
            const string? linkedId = null;
            int? limit = 500;

            var response = _instance!.GetVisits(visitorId, requestId, linkedId, limit);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response, Is.InstanceOf<VisitorsGetResponse>(), "response is VisitorsGetResponse");
                Assert.That(response.VisitorId, Is.EqualTo(visitorId));
                Assert.That(response.Visits, Has.Count.EqualTo(62));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/visitors/{visitorId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&request_id={requestId}&limit={limit}&api_key=123"));
                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
            });
        }

        [Test]
        public async Task GetVisitsTooManyRequestsErrorTest()
        {
            SetupMockResponse("get_visitors_429_too_many_requests.json");

            _mockResponseHeaders?.Add("Retry-After", "10");
            _mockResponseStatusCode = TooManyRequestsException.TooManyRequestsCode;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.GetVisitsAsync(visitorId), Throws
                .TypeOf<TooManyRequestsException>().With.Property(nameof(TooManyRequestsException.HttpCode))
                .EqualTo(TooManyRequestsException.TooManyRequestsCode));
        }

        [Test]
        public void DeleteVisitorDataTest()
        {
            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            var response = _instance!.DeleteVisitorDataWithHttpInfo(visitorId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/visitors/{visitorId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("DELETE"));
            });
        }

        [Test]
        public async Task DeleteVisitorData403ErrorTest()
        {
            SetupMockResponse("errors/403_feature_not_enabled.json");

            _mockResponseStatusCode = 403;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.DeleteVisitorDataAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(403)
            );
        }

        [Test]
        public async Task DeleteVisitorData400ErrorTest()
        {
            SetupMockResponse("errors/400_request_body_invalid.json");

            _mockResponseStatusCode = 400;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.DeleteVisitorDataAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(400)
            );
        }

        [Test]
        public async Task DeleteVisitorData429ErrorTest()
        {
            SetupMockResponse("errors/429_too_many_requests.json");

            _mockResponseStatusCode = 429;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.DeleteVisitorDataAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<TooManyRequestsException>());
        }

        [Test]
        public async Task DeleteVisitorData404ErrorTest()
        {
            SetupMockResponse("errors/404_visitor_not_found.json");

            _mockResponseStatusCode = 404;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.DeleteVisitorDataAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(404)
            );
        }

        [Test]
        public async Task DeleteVisitorDataNotMappedStatusCodeText()
        {
            // It's ok to use this response even though it matches different status code
            SetupMockResponse("errors/403_token_not_found.json");

            _mockResponseStatusCode = 401;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.DeleteVisitorDataAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .Null
            );
        }

        [Test]
        public void UpdateEventTest()
        {
            const string requestId = "1708102555327.NLOjmg";

            var body = new EventsUpdateRequest()
            {
                Suspect = false,
                LinkedId = "new_linked_id",
                Tag = new Tag()
                {
                    { "key", "value" }
                }
            };
            var response = _instance!.UpdateEventWithHttpInfo(body, requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;
                var bodyStr = _requests[0].Body;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("PUT"));
                Assert.That(request.ContentType, Is.EqualTo("application/json; charset=utf-8"));

                Assert.That(bodyStr, Is.EqualTo(JsonUtils.Serialize(body)));
            });
        }

        [Test]
        public void UpdateEventWithComplexTagTest()
        {
            const string requestId = "1708102555327.NLOjmg";

            var tagStr = File.ReadAllText($"../../../local-mocks/complex_tag.json");
            var tag = JsonUtils.Deserialize<Tag>(tagStr);

            var body = new EventsUpdateRequest()
            {
                Tag = tag!
            };
            var response = _instance!.UpdateEventWithHttpInfo(body, requestId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;
                var bodyStr = _requests[0].Body;

                var expectedTag = JsonUtils.Serialize(JsonUtils.Deserialize<object>(tagStr)!);
                Assert.That(bodyStr, Is.EqualTo($"{{\"tag\":{expectedTag}}}"));

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/{requestId}?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("PUT"));
                Assert.That(request.ContentType, Is.EqualTo("application/json; charset=utf-8"));

                Assert.That(bodyStr, Is.EqualTo(JsonUtils.Serialize(body)));
            });
        }

        [Test]
        public async Task UpdateEvent400ErrorTest()
        {
            SetupMockResponse("errors/400_request_body_invalid.json");

            _mockResponseStatusCode = 400;

            const string requestId = "1708102555327.NLOjmg";

            var body = new EventsUpdateRequest()
            {
                Suspect = false,
                LinkedId = "new_linked_id",
                Tag = new Tag()
                {
                    { "key", "value" }
                }
            };

            await Assert.ThatAsync(async () => await _instance!.UpdateEventAsyncWithHttpInfo(body, requestId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(400)
            );
        }

        [Test]
        public async Task UpdateEvent403ErrorTest()
        {
            SetupMockResponse("errors/403_feature_not_enabled.json");

            _mockResponseStatusCode = 403;

            const string requestId = "1708102555327.NLOjmg";

            var body = new EventsUpdateRequest()
            {
                Suspect = false,
                LinkedId = "new_linked_id",
                Tag = new Tag()
                {
                    { "key", "value" }
                }
            };

            await Assert.ThatAsync(async () => await _instance!.UpdateEventAsyncWithHttpInfo(body, requestId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(403)
            );
        }

        [Test]
        public async Task UpdateEvent404ErrorTest()
        {
            SetupMockResponse("errors/404_visitor_not_found.json");

            _mockResponseStatusCode = 404;

            const string requestId = "1708102555327.NLOjmg";

            var body = new EventsUpdateRequest()
            {
                Suspect = false,
                LinkedId = "new_linked_id",
                Tag = new Tag()
                {
                    { "key", "value" }
                }
            };

            await Assert.ThatAsync(async () => await _instance!.UpdateEventAsyncWithHttpInfo(body, requestId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(404)
            );
        }

        [Test]
        public async Task UpdateEvent409ErrorTest()
        {
            SetupMockResponse("errors/409_state_not_ready.json");

            _mockResponseStatusCode = 409;

            const string requestId = "1708102555327.NLOjmg";

            var body = new EventsUpdateRequest()
            {
                Suspect = false,
                LinkedId = "new_linked_id",
                Tag = new Tag()
                {
                    { "key", "value" }
                }
            };

            await Assert.ThatAsync(async () => await _instance!.UpdateEventAsyncWithHttpInfo(body, requestId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(409)
            );
        }

        [Test]
        public void GetRelatedVisitorsTest()
        {
            SetupMockResponse("related-visitors/get_related_visitors_200.json");

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            var response = _instance!.GetRelatedVisitorsWithHttpInfo(visitorId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/related-visitors?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&visitor_id={visitorId}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("GET"));
                Assert.That(response.Data, Is.EqualTo(GetMockResponse<RelatedVisitorsResponse>()));
            });
        }

        [Test]
        public async Task GetRelatedVisitors400ErrorTest()
        {
            SetupMockResponse("errors/400_visitor_id_invalid.json");
            _mockResponseStatusCode = 400;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.GetRelatedVisitorsAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(400)
            );
        }

        [Test]
        public async Task GetRelatedVisitors403ErrorTest()
        {
            SetupMockResponse("errors/403_feature_not_enabled.json");
            _mockResponseStatusCode = 403;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.GetRelatedVisitorsAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(403)
            );
        }

        [Test]
        public async Task GetRelatedVisitors404ErrorTest()
        {
            SetupMockResponse("errors/404_visitor_not_found.json");
            _mockResponseStatusCode = 404;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.GetRelatedVisitorsAsyncWithHttpInfo(visitorId),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(404)
            );
        }

        [Test]
        public async Task GetRelatedVisitors429ErrorTest()
        {
            SetupMockResponse("errors/429_too_many_requests.json");
            _mockResponseStatusCode = 429;

            const string visitorId = "AcxioeQKffpXF8iGQK3P";

            await Assert.ThatAsync(async () => await _instance!.GetRelatedVisitorsAsyncWithHttpInfo(visitorId), Throws
                .TypeOf<TooManyRequestsException>().With.Property(nameof(TooManyRequestsException.HttpCode))
                .EqualTo(TooManyRequestsException.TooManyRequestsCode));
        }

        [Test]
        public void SearchEventsMinimumParamsTest()
        {
            SetupMockResponse("get_event_search_200.json");

            const int limit = 1;

            var response = _instance!.SearchEventsWithHttpInfo(limit);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/search?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&limit={limit}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("GET"));

                Assert.That(response.Data.Events.Count, Is.EqualTo(1));
                var eventData = response.Data.Events[0];

                Assert.That(eventData.Products.Identification.Data.RequestId, Is.EqualTo("1708102555327.NLOjmg"));
                Assert.That(eventData.Products.IpInfo.Data.V4.Address, Is.EqualTo("94.142.239.124"));
                Assert.That(eventData.Products.ClonedApp.Data.Result, Is.False);
                Assert.That(eventData.Products.Emulator.Data.Result, Is.False);
                Assert.That(eventData.Products.FactoryReset.Data.Timestamp, Is.EqualTo(0));
                Assert.That(eventData.Products.Frida.Data.Result, Is.False);
                Assert.That(eventData.Products.Incognito.Data.Result, Is.False);
                Assert.That(eventData.Products.IpBlocklist.Data.Result, Is.False);
                Assert.That(eventData.Products.IpBlocklist.Data.Details.AttackSource, Is.False);
                Assert.That(eventData.Products.IpBlocklist.Data.Details.EmailSpam, Is.False);
                Assert.That(eventData.Products.Jailbroken.Data.Result, Is.False);
                Assert.That(eventData.Products.PrivacySettings.Data.Result, Is.False);
                Assert.That(eventData.Products.Proxy.Data.Result, Is.False);
                Assert.That(eventData.Products.RootApps.Data.Result, Is.False);
                Assert.That(eventData.Products.Tampering.Data.Result, Is.False);
                Assert.That(eventData.Products.Tor.Data.Result, Is.False);
                Assert.That(eventData.Products.VirtualMachine.Data.Result, Is.False);
                Assert.That(eventData.Products.Vpn.Data.Result, Is.False);
                Assert.That(eventData.Products.ClonedApp.Data.Result, Is.False);
                var factoryResedExpectedTime = DateTime.Parse("1970-01-01T00:00:00Z", CultureInfo.InvariantCulture,
                    DateTimeStyles.AdjustToUniversal);
                Assert.That(eventData.Products.FactoryReset.Data.Time, Is.EqualTo(factoryResedExpectedTime));
                Assert.That(eventData.Products.Jailbroken.Data.Result, Is.False);
                Assert.That(eventData.Products.Frida.Data.Result, Is.False);
                Assert.That(eventData.Products.PrivacySettings.Data.Result, Is.False);
                Assert.That(eventData.Products.VirtualMachine.Data.Result, Is.False);
                var rawDeviceAttributes = eventData.Products.RawDeviceAttributes.Data;
                Assert.That(rawDeviceAttributes.ContainsKey("colorGamut"), Is.True);
                Assert.That(rawDeviceAttributes["colorGamut"], Is.Not.Null);
                Assert.That(rawDeviceAttributes["colorGamut"].Value.ToString(), Is.EqualTo("p3"));
                var colorGamut = rawDeviceAttributes["colorGamut"].Value;
                Assert.That(colorGamut.Value.ToString(), Is.EqualTo("p3"));
                var canvas = rawDeviceAttributes["canvas"].Value;
                Assert.That(canvas.Value.GetProperty("Geometry").ToString(),
                    Is.EqualTo("4dce9d6017c3e0c052a77252f29f2b1c"));
            });
        }

        [Test]
        public void SearchEventsMaximumParamsTest()
        {
            SetupMockResponse("get_event_search_200.json");

            const int limit = 1;
            const string visitorId = "AcxioeQKffpXF8iGQK3P";
            const string bot = "good";
            const string ipAddress = "10.0.0.0/24";
            const string encodedIpAddress = "10.0.0.0%2f24";
            const string linkedId = "some_linked_id";
            const long start = 1582299576511;
            const long end = 1582299576513;
            const bool reverse = true;
            const bool suspect = false;
            const string paginationKey = "pagination";
            const bool vpn = true;
            const bool virtualMachine = false;
            const bool tampering = false;
            const bool antiDetectBrowser = false;
            const bool incognito = false;
            const bool privacySettings = false;
            const bool jailbroken = false;
            const bool frida = false;
            const bool factoryReset = false;
            const bool clonedApp = false;
            const bool emulator = false;
            const bool rootApps = false;
            const string vpnConfidence = "high";
            const float minSuspectScore = 0.7f;
            const string encodedMinSuspectScore = "0.70";
            const bool ipBlocklist = false;
            const bool datacenter = false;
            const bool developerTools = true;
            const bool locationSpoofing = true;
            const bool mitmAttack = true;
            const bool proxy = true;
            const string sdkVersion = "testSdkVersion";
            const string sdkPlatform = "testSdkPlatform";
            List<string> environment = new List<string> { "env1", "env2" };
            const string proximityId = "testProximityId";
            const int proximityPrecisionRadius = 10;

            var response = _instance!.SearchEventsWithHttpInfo(
                limit: limit,
                paginationKey: paginationKey,
                visitorId: visitorId,
                bot: bot,
                ipAddress: ipAddress,
                linkedId: linkedId,
                start: start,
                end: end,
                reverse: reverse,
                suspect: suspect,
                vpn: vpn,
                virtualMachine: virtualMachine,
                tampering: tampering,
                antiDetectBrowser: antiDetectBrowser,
                incognito: incognito,
                privacySettings: privacySettings,
                jailbroken: jailbroken,
                frida: frida,
                factoryReset: factoryReset,
                clonedApp: clonedApp,
                emulator: emulator,
                rootApps: rootApps,
                vpnConfidence: vpnConfidence,
                minSuspectScore: minSuspectScore,
                ipBlocklist: ipBlocklist,
                datacenter: datacenter,
                developerTools: developerTools,
                locationSpoofing: locationSpoofing,
                mitmAttack: mitmAttack,
                proxy: proxy,
                sdkVersion: sdkVersion,
                sdkPlatform: sdkPlatform,
                environment: environment,
                proximityId: proximityId,
                proximityPrecisionRadius: proximityPrecisionRadius
            );

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));
                Assert.That(response.Response.StatusCode, Is.EqualTo(HttpStatusCode.OK));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                var queryParams =
                    $"limit={limit}&pagination_key={paginationKey}&visitor_id={visitorId}&bot={bot}&ip_address={encodedIpAddress}&linked_id={linkedId}&start={start}&end={end}&reverse={reverse}&suspect={suspect}&vpn={vpn}&virtual_machine={virtualMachine}&tampering={tampering}&anti_detect_browser={antiDetectBrowser}&incognito={incognito}&privacy_settings={privacySettings}&jailbroken={jailbroken}&frida={frida}&factory_reset={factoryReset}&cloned_app={clonedApp}&emulator={emulator}&root_apps={rootApps}&vpn_confidence={vpnConfidence}&min_suspect_score={encodedMinSuspectScore}&ip_blocklist={ipBlocklist}&datacenter={datacenter}&developer_tools={developerTools}&location_spoofing={locationSpoofing}&mitm_attack={mitmAttack}&proxy={proxy}&sdk_version={sdkVersion}&sdk_platform={sdkPlatform}&proximity_id={proximityId}&proximity_precision_radius={proximityPrecisionRadius}&environment={environment[0]}&environment={environment[1]}";
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/search?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&{queryParams}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("GET"));

                Assert.That(response.Data.Events.Count, Is.EqualTo(1));
            });
        }

        [Test]
        public void SearchEventsHalfParamsTest()
        {
            SetupMockResponse("get_event_search_200.json");

            const int limit = 1;
            const string bot = "good";
            const string linkedId = "some_linked_id";
            const long start = 1582299576511;
            const bool reverse = true;


            var response = _instance!.SearchEvents(limit, start: start, reverse: reverse, bot: bot, linkedId: linkedId);

            Assert.Multiple(() =>
            {
                Assert.That(_requests, Has.Count.EqualTo(1));

                var request = _requests[0].Request;

                Assert.That(request.Headers.Get("User-Agent"),
                    Is.EqualTo($"Swagger-Codegen/{Configuration.Version}/csharp"));

                var queryParams = $"limit={limit}&bot={bot}&linked_id={linkedId}&start={start}&reverse={reverse}";
                Assert.That(request.Url?.ToString(),
                    Is.EqualTo(
                        $"http://127.0.0.1:8080/events/search?ii=fingerprint-pro-server-api-dotnet-sdk%2f{Configuration.Version}&{queryParams}&api_key=123"));

                Assert.That(request.HttpMethod, Is.EqualTo("GET"));

                Assert.That(response.Events.Count, Is.EqualTo(1));
            });
        }

        [Test]
        public async Task SearchEvents400ErrorTest()
        {
            SetupMockResponse("errors/400_ip_address_invalid.json");
            _mockResponseStatusCode = 400;

            const int limit = 1;
            const string ipAddress = "10123";

            await Assert.ThatAsync(async () => await _instance!.SearchEventsAsync(limit, ipAddress: ipAddress),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(400)
            );
        }

        [Test]
        public async Task SearchEvents403ErrorTest()
        {
            SetupMockResponse("errors/403_feature_not_enabled.json");
            _mockResponseStatusCode = 403;

            const int limit = 1;

            await Assert.ThatAsync(async () => await _instance!.SearchEventsAsync(limit),
                Throws.TypeOf<ApiException>().With.Property(nameof(ApiException.ErrorContent))
                    .InstanceOf<ErrorResponse>()
                    .And
                    .With.Property(nameof(ApiException.HttpCode)).EqualTo(403)
            );
        }
    }
}