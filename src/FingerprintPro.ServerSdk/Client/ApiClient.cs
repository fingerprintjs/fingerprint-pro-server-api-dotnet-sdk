/*
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Web;
using FingerprintPro.ServerSdk.Api;

namespace FingerprintPro.ServerSdk.Client
{
    /// <summary>
    /// API client is responsible for making the HTTP call to the API backend.
    /// </summary>
    public class ApiClient
    {

        private readonly JsonSerializerOptions _serializerOptions = new JsonSerializerOptions
        {
            Converters = { new JsonStringEnumConverter() },
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            IncludeFields = true
        };

        /// <summary>
        /// Gets or sets the HttpClient.
        /// </summary>
        /// <value>An instance of the HttpClient</value>
        public HttpClient Client { get; set; }

        /// <summary>
        /// Gets or sets an instance of the IReadableConfiguration.
        /// </summary>
        /// <value>An instance of the IReadableConfiguration.</value>
        /// <remarks>
        /// <see cref="IReadableConfiguration"/> helps us to avoid modifying possibly global
        /// configuration values from within a given client. It does not guarantee thread-safety
        /// of the <see cref="Configuration"/> instance in any way.
        /// </remarks>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path (https://api.fpjs.io).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        public ApiClient(Configuration config)
        {
            Configuration = config;

            Client = new HttpClient();
            Client.BaseAddress = new Uri(Configuration.BasePath);
        }

        public HttpRequestMessage CreateRequestMessage(HttpMethod method, UriBuilder uri)
        {
            var query = HttpUtility.ParseQueryString(uri.Query);
            query["ii"] = $"fingerprint-pro-server-api-dotnet-sdk/{ServerSdk.Client.Configuration.Version}";

            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                query["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            uri.Query = query.ToString();

            var request = new HttpRequestMessage(HttpMethod.Get, uri.ToString());

            request.Headers.TryAddWithoutValidation("User-Agent", Configuration.UserAgent);

            var apiKey = Configuration.GetApiKeyWithPrefix("Auth-API-Key");

            if (!string.IsNullOrEmpty(apiKey))
            {
                request.Headers.TryAddWithoutValidation("Auth-API-Key", apiKey);
            }

            return request;
        }

        public T? Deserialize<T>(string data)
        {
            return JsonSerializer.Deserialize<T>(data, _serializerOptions);
        }

        public UriBuilder GetRequestPath(OperationDefinition definition, params string[] args)
        {
            var uri = new UriBuilder(Configuration.BasePath)
            {
                Path = definition.GetPath(args)
            };


            return uri;
        }

        public async Task<ApiResponse<T>> DoRequest<T>(OperationDefinition definition, HttpMethod method, params string[] args)
        {
            var path = GetRequestPath(definition, args);
            var request = CreateRequestMessage(method, path);

            var response = await Client.SendAsync(request);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
                throw HandleException(definition.OperationName, response, responseContent, definition);


            var data = Deserialize<T>(responseContent);

            return new ApiResponse<T>(response, data!);

        }

        private Exception HandleException(string methodName, HttpResponseMessage response, string responseContent,
            OperationDefinition operationDefinition)
        {
            var statusCode = (int)response.StatusCode;

            var instance = operationDefinition.GetResponse(statusCode, responseContent);

            if (instance is Exception exception)
            {
                return exception;
            }

            return new ApiException(statusCode,
                $"Error calling {methodName}: {response.ReasonPhrase}", response.Content);
        }

    }
}
