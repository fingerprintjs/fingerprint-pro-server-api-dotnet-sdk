/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// Contains all the information from Bot Detection product
    /// </summary>
    [DataContract]
    public class BotdResult : IEquatable<BotdResult>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="BotdResult" /> class.
        /// </summary>
        /// <param name="ip">IP address of the requesting browser or bot. (required).</param>
        /// <param name="time">Time in UTC when the request from the JS agent was made. We recommend to treat requests that are older than 2 minutes as malicious. Otherwise, request replay attacks are possible (required).</param>
        /// <param name="url">Page URL from which identification request was sent. (required).</param>
        /// <param name="userAgent">userAgent (required).</param>
        /// <param name="requestId">requestId (required).</param>
        /// <param name="linkedId">linkedId.</param>
        /// <param name="bot">bot (required).</param>
        public BotdResult(string ip = default(string), DateTime? time = default(DateTime?), string url = default(string), string userAgent = default(string), string requestId = default(string), string linkedId = default(string), BotdDetectionResult bot = default(BotdDetectionResult))
        {
            // to ensure "ip" is required (not null)
            // swagger debug: BotdResult Ip

            if (ip == null)
            {
                throw new InvalidDataException("ip is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.Ip = ip;
            }
            // to ensure "time" is required (not null)
            // swagger debug: BotdResult Time

            if (time == null)
            {
                throw new InvalidDataException("time is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            // to ensure "url" is required (not null)
            // swagger debug: BotdResult Url

            if (url == null)
            {
                throw new InvalidDataException("url is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "userAgent" is required (not null)
            // swagger debug: BotdResult UserAgent

            if (userAgent == null)
            {
                throw new InvalidDataException("userAgent is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.UserAgent = userAgent;
            }
            // to ensure "requestId" is required (not null)
            // swagger debug: BotdResult RequestId

            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "bot" is required (not null)
            // swagger debug: BotdResult Bot

            if (bot == null)
            {
                throw new InvalidDataException("bot is a required property for BotdResult and cannot be null");
            }
            else
            {
                this.Bot = bot;
            }
            this.LinkedId = linkedId;
        }

        /// <summary>
        /// IP address of the requesting browser or bot.
        /// </summary>
        /// <value>IP address of the requesting browser or bot.</value>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Time in UTC when the request from the JS agent was made. We recommend to treat requests that are older than 2 minutes as malicious. Otherwise, request replay attacks are possible
        /// </summary>
        /// <value>Time in UTC when the request from the JS agent was made. We recommend to treat requests that are older than 2 minutes as malicious. Otherwise, request replay attacks are possible</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        [JsonPropertyName("time")]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Page URL from which identification request was sent.
        /// </summary>
        /// <value>Page URL from which identification request was sent.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name = "userAgent", EmitDefaultValue = false)]
        [JsonPropertyName("userAgent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        [JsonPropertyName("requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets LinkedId
        /// </summary>
        [DataMember(Name = "linkedId", EmitDefaultValue = false)]
        [JsonPropertyName("linkedId")]
        public string LinkedId { get; set; }

        /// <summary>
        /// Gets or Sets Bot
        /// </summary>
        [DataMember(Name = "bot", EmitDefaultValue = false)]
        [JsonPropertyName("bot")]
        public BotdDetectionResult Bot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BotdResult {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  LinkedId: ").Append(LinkedId).Append("\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if BotdResult instances are equal
        /// </summary>
        /// <param name="input">Instance of BotdResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BotdResult input)
        {
            if (input == null)
                return false;

            return
                (
                this.Ip == input.Ip ||
                (this.Ip != null &&
                this.Ip.Equals(input.Ip))
                ) &&
                (
                this.Time == input.Time ||
                (this.Time != null &&
                this.Time.Equals(input.Time))
                ) &&
                (
                this.Url == input.Url ||
                (this.Url != null &&
                this.Url.Equals(input.Url))
                ) &&
                (
                this.UserAgent == input.UserAgent ||
                (this.UserAgent != null &&
                this.UserAgent.Equals(input.UserAgent))
                ) &&
                (
                this.RequestId == input.RequestId ||
                (this.RequestId != null &&
                this.RequestId.Equals(input.RequestId))
                ) &&
                (
                this.LinkedId == input.LinkedId ||
                (this.LinkedId != null &&
                this.LinkedId.Equals(input.LinkedId))
                ) &&
                (
                this.Bot == input.Bot ||
                (this.Bot != null &&
                this.Bot.Equals(input.Bot))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.LinkedId != null)
                    hashCode = hashCode * 59 + this.LinkedId.GetHashCode();
                if (this.Bot != null)
                    hashCode = hashCode * 59 + this.Bot.GetHashCode();
                return hashCode;
            }
        }

    }
}
