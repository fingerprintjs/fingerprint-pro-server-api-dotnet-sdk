/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Text.Json;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// GeolocationContinent
    /// </summary>
    [DataContract]
    public class GeolocationContinent : IEquatable<GeolocationContinent>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationContinent" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="name">name (required).</param>
        public GeolocationContinent(string code = default(string), string name = default(string))
        {
            // to ensure "code" is required (not null)
            // swagger debug: GeolocationContinent Code

            if (code == null)
            {
                throw new InvalidDataException("code is a required property for GeolocationContinent and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "name" is required (not null)
            // swagger debug: GeolocationContinent Name

            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GeolocationContinent and cannot be null");
            }
            else
            {
                this.Name = name;
            }
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeolocationContinent {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if GeolocationContinent instances are equal
        /// </summary>
        /// <param name="input">Instance of GeolocationContinent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeolocationContinent? input)
        {
            if (input == null)
                return false;

            return
                (
                this.Code == input.Code ||
                (this.Code != null &&
                this.Code.Equals(input.Code))
                ) &&
                (
                this.Name == input.Name ||
                (this.Name != null &&
                this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

    }
}
