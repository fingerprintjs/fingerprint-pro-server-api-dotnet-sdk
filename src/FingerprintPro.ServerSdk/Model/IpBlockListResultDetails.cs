/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// IpBlockListResultDetails
    /// </summary>
    [DataContract]
    public partial class IpBlockListResultDetails : IEquatable<IpBlockListResultDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpBlockListResultDetails" /> class.
        /// </summary>
        /// <param name="emailSpam">IP address was part of a known email spam attack (SMTP). (required).</param>
        /// <param name="attackSource">IP address was part of a known network attack (SSH/HTTPS). (required).</param>
        public IpBlockListResultDetails(bool? emailSpam = default(bool?), bool? attackSource = default(bool?))
        {
            // to ensure "emailSpam" is required (not null)

            if (emailSpam == null)
            {
                throw new InvalidDataException("emailSpam is a required property for IpBlockListResultDetails and cannot be null");
            }
            else
            {
                this.EmailSpam = emailSpam;
            }
            // to ensure "attackSource" is required (not null)

            if (attackSource == null)
            {
                throw new InvalidDataException("attackSource is a required property for IpBlockListResultDetails and cannot be null");
            }
            else
            {
                this.AttackSource = attackSource;
            }
        }

        /// <summary>
        /// IP address was part of a known email spam attack (SMTP).
        /// </summary>
        /// <value>IP address was part of a known email spam attack (SMTP).</value>
        [DataMember(Name = "emailSpam", EmitDefaultValue = false)]
        public bool? EmailSpam { get; set; }

        /// <summary>
        /// IP address was part of a known network attack (SSH/HTTPS).
        /// </summary>
        /// <value>IP address was part of a known network attack (SSH/HTTPS).</value>
        [DataMember(Name = "attackSource", EmitDefaultValue = false)]
        public bool? AttackSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpBlockListResultDetails {\n");
            sb.Append("  EmailSpam: ").Append(EmailSpam).Append("\n");
            sb.Append("  AttackSource: ").Append(AttackSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if IpBlockListResultDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of IpBlockListResultDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpBlockListResultDetails input)
        {
            if (input == null)
                return false;

            return
                (
                this.EmailSpam == input.EmailSpam ||
                (this.EmailSpam != null &&
                this.EmailSpam.Equals(input.EmailSpam))
                ) &&
                (
                this.AttackSource == input.AttackSource ||
                (this.AttackSource != null &&
                this.AttackSource.Equals(input.AttackSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailSpam != null)
                    hashCode = hashCode * 59 + this.EmailSpam.GetHashCode();
                if (this.AttackSource != null)
                    hashCode = hashCode * 59 + this.AttackSource.GetHashCode();
                return hashCode;
            }
        }

    }
}