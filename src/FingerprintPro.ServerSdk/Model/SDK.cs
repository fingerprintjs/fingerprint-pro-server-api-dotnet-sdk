/* 
 * Fingerprint Server API
 *
 * Fingerprint Server API allows you to search, update, and delete identification events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Text.Json;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// Contains information about the SDK used to perform the request.
    /// </summary>
    [DataContract]
    public class SDK : IEquatable<SDK>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="SDK" /> class.
        /// </summary>
        /// <param name="platform">Platform of the SDK. (required).</param>
        /// <param name="version">SDK version string. (required).</param>
        public SDK(string platform = default(string), string version = default(string))
        {
            // to ensure "platform" is required (not null)
            // swagger debug: SDK Platform

            if (platform == null)
            {
                throw new InvalidDataException("platform is a required property for SDK and cannot be null");
            }
            else
            {
                this.Platform = platform;
            }
            // to ensure "version" is required (not null)
            // swagger debug: SDK Version

            if (version == null)
            {
                throw new InvalidDataException("version is a required property for SDK and cannot be null");
            }
            else
            {
                this.Version = version;
            }
        }

        /// <summary>
        /// Platform of the SDK.
        /// </summary>
        /// <value>Platform of the SDK.</value>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonPropertyName("platform")]
        public string Platform { get; set; }

        /// <summary>
        /// SDK version string.
        /// </summary>
        /// <value>SDK version string.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        [JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDK {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if SDK instances are equal
        /// </summary>
        /// <param name="input">Instance of SDK to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDK? input)
        {
            if (input == null)
                return false;

            return
                (
                this.Platform == input.Platform ||
                (this.Platform != null &&
                this.Platform.Equals(input.Platform))
                ) &&
                (
                this.Version == input.Version ||
                (this.Version != null &&
                this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

    }
}
