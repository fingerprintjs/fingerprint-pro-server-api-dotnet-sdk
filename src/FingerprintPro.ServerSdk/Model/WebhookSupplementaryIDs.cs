/* 
 * Fingerprint Server API
 *
 * Fingerprint Server API allows you to search, update, and delete identification events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Text.Json;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// Other identities that have been established for a given Visitor.
    /// </summary>
    [DataContract]
    public class WebhookSupplementaryIDs : IEquatable<WebhookSupplementaryIDs>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSupplementaryIDs" /> class.
        /// </summary>
        /// <param name="standard">standard (required).</param>
        /// <param name="highRecall">highRecall (required).</param>
        public WebhookSupplementaryIDs(SupplementaryID standard = default(SupplementaryID), SupplementaryID highRecall = default(SupplementaryID))
        {
            // to ensure "standard" is required (not null)
            // swagger debug: WebhookSupplementaryIDs Standard

            if (standard == null)
            {
                throw new InvalidDataException("standard is a required property for WebhookSupplementaryIDs and cannot be null");
            }
            else
            {
                this.Standard = standard;
            }
            // to ensure "highRecall" is required (not null)
            // swagger debug: WebhookSupplementaryIDs HighRecall

            if (highRecall == null)
            {
                throw new InvalidDataException("highRecall is a required property for WebhookSupplementaryIDs and cannot be null");
            }
            else
            {
                this.HighRecall = highRecall;
            }
        }

        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name = "standard", EmitDefaultValue = false)]
        [JsonPropertyName("standard")]
        public SupplementaryID Standard { get; set; }

        /// <summary>
        /// Gets or Sets HighRecall
        /// </summary>
        [DataMember(Name = "highRecall", EmitDefaultValue = false)]
        [JsonPropertyName("highRecall")]
        public SupplementaryID HighRecall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookSupplementaryIDs {\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  HighRecall: ").Append(HighRecall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if WebhookSupplementaryIDs instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookSupplementaryIDs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookSupplementaryIDs? input)
        {
            if (input == null)
                return false;

            return
                (
                this.Standard == input.Standard ||
                (this.Standard != null &&
                this.Standard.Equals(input.Standard))
                ) &&
                (
                this.HighRecall == input.HighRecall ||
                (this.HighRecall != null &&
                this.HighRecall.Equals(input.HighRecall))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                if (this.HighRecall != null)
                    hashCode = hashCode * 59 + this.HighRecall.GetHashCode();
                return hashCode;
            }
        }

    }
}
