/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Text.Json;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// WebhookTampering
    /// </summary>
    [DataContract]
    public class WebhookTampering : IEquatable<WebhookTampering>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookTampering" /> class.
        /// </summary>
        /// <param name="result">Indicates if an identification request from a browser or an Android SDK has been tampered with. Not supported in the iOS SDK, is always `false` for iOS requests.   * `true` - If the request meets either of the following conditions:     * Contains anomalous browser or device attributes that could not have been legitimately produced by the JavaScript agent or the Android SDK (see `anomalyScore`).     * Originated from an anti-detect browser like Incognition (see `antiDetectBrowser`).   * `false` - If the request is considered genuine or was generated by the iOS SDK. .</param>
        /// <param name="anomalyScore">A score that indicates the extent of anomalous data in the request. This field applies to requests originating from **both** browsers and Android SDKs.    * Values above `0.5` indicate that the request has been tampered with.   * Values below `0.5` indicate that the request is genuine. .</param>
        /// <param name="antiDetectBrowser">Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations. This field does not apply to requests originating from mobile SDKs.   * `true` - The browser resembles a known anti-detect browser, for example, Incognition.   * `false` - The browser does not resemble an anti-detect browser or the request originates from a mobile SDK. .</param>
        public WebhookTampering(bool? result = default(bool?), double? anomalyScore = default(double?), bool? antiDetectBrowser = default(bool?))
        {
            this.Result = result;
            this.AnomalyScore = anomalyScore;
            this.AntiDetectBrowser = antiDetectBrowser;
        }

        /// <summary>
        /// Indicates if an identification request from a browser or an Android SDK has been tampered with. Not supported in the iOS SDK, is always `false` for iOS requests.   * `true` - If the request meets either of the following conditions:     * Contains anomalous browser or device attributes that could not have been legitimately produced by the JavaScript agent or the Android SDK (see `anomalyScore`).     * Originated from an anti-detect browser like Incognition (see `antiDetectBrowser`).   * `false` - If the request is considered genuine or was generated by the iOS SDK. 
        /// </summary>
        /// <value>Indicates if an identification request from a browser or an Android SDK has been tampered with. Not supported in the iOS SDK, is always `false` for iOS requests.   * `true` - If the request meets either of the following conditions:     * Contains anomalous browser or device attributes that could not have been legitimately produced by the JavaScript agent or the Android SDK (see `anomalyScore`).     * Originated from an anti-detect browser like Incognition (see `antiDetectBrowser`).   * `false` - If the request is considered genuine or was generated by the iOS SDK. </value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        [JsonPropertyName("result")]
        public bool? Result { get; set; }

        /// <summary>
        /// A score that indicates the extent of anomalous data in the request. This field applies to requests originating from **both** browsers and Android SDKs.    * Values above `0.5` indicate that the request has been tampered with.   * Values below `0.5` indicate that the request is genuine. 
        /// </summary>
        /// <value>A score that indicates the extent of anomalous data in the request. This field applies to requests originating from **both** browsers and Android SDKs.    * Values above `0.5` indicate that the request has been tampered with.   * Values below `0.5` indicate that the request is genuine. </value>
        [DataMember(Name = "anomalyScore", EmitDefaultValue = false)]
        [JsonPropertyName("anomalyScore")]
        public double? AnomalyScore { get; set; }

        /// <summary>
        /// Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations. This field does not apply to requests originating from mobile SDKs.   * `true` - The browser resembles a known anti-detect browser, for example, Incognition.   * `false` - The browser does not resemble an anti-detect browser or the request originates from a mobile SDK. 
        /// </summary>
        /// <value>Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations. This field does not apply to requests originating from mobile SDKs.   * `true` - The browser resembles a known anti-detect browser, for example, Incognition.   * `false` - The browser does not resemble an anti-detect browser or the request originates from a mobile SDK. </value>
        [DataMember(Name = "antiDetectBrowser", EmitDefaultValue = false)]
        [JsonPropertyName("antiDetectBrowser")]
        public bool? AntiDetectBrowser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookTampering {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  AnomalyScore: ").Append(AnomalyScore).Append("\n");
            sb.Append("  AntiDetectBrowser: ").Append(AntiDetectBrowser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if WebhookTampering instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookTampering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookTampering? input)
        {
            if (input == null)
                return false;

            return
                (
                this.Result == input.Result ||
                (this.Result != null &&
                this.Result.Equals(input.Result))
                ) &&
                (
                this.AnomalyScore == input.AnomalyScore ||
                (this.AnomalyScore != null &&
                this.AnomalyScore.Equals(input.AnomalyScore))
                ) &&
                (
                this.AntiDetectBrowser == input.AntiDetectBrowser ||
                (this.AntiDetectBrowser != null &&
                this.AntiDetectBrowser.Equals(input.AntiDetectBrowser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.AnomalyScore != null)
                    hashCode = hashCode * 59 + this.AnomalyScore.GetHashCode();
                if (this.AntiDetectBrowser != null)
                    hashCode = hashCode * 59 + this.AntiDetectBrowser.GetHashCode();
                return hashCode;
            }
        }

    }
}
