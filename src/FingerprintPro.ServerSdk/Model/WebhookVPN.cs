/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using FingerprintPro.ServerSdk.Json;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// WebhookVPN
    /// </summary>
    [DataContract]
    public class WebhookVPN : IEquatable<WebhookVPN>
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookVPN" /> class.
        /// </summary>
        /// <param name="result">VPN or other anonymizing service has been used when sending the request..</param>
        /// <param name="confidence">confidence.</param>
        /// <param name="originTimezone">Local timezone which is used in timezoneMismatch method..</param>
        /// <param name="originCountry">Country of the request (only for Android SDK version >= 2.4.0, ISO 3166 format or unknown)..</param>
        /// <param name="methods">methods.</param>
        public WebhookVPN(bool? result = default(bool?), VPNConfidence confidence = default(VPNConfidence), string originTimezone = default(string), string originCountry = default(string), VPNMethods methods = default(VPNMethods))
        {
            this.Result = result;
            this.Confidence = confidence;
            this.OriginTimezone = originTimezone;
            this.OriginCountry = originCountry;
            this.Methods = methods;
        }

        /// <summary>
        /// VPN or other anonymizing service has been used when sending the request.
        /// </summary>
        /// <value>VPN or other anonymizing service has been used when sending the request.</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        [JsonPropertyName("result")]
        public bool? Result { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        [JsonPropertyName("confidence")]
        public VPNConfidence Confidence { get; set; }

        /// <summary>
        /// Local timezone which is used in timezoneMismatch method.
        /// </summary>
        /// <value>Local timezone which is used in timezoneMismatch method.</value>
        [DataMember(Name = "originTimezone", EmitDefaultValue = false)]
        [JsonPropertyName("originTimezone")]
        public string OriginTimezone { get; set; }

        /// <summary>
        /// Country of the request (only for Android SDK version >= 2.4.0, ISO 3166 format or unknown).
        /// </summary>
        /// <value>Country of the request (only for Android SDK version >= 2.4.0, ISO 3166 format or unknown).</value>
        [DataMember(Name = "originCountry", EmitDefaultValue = false)]
        [JsonPropertyName("originCountry")]
        public string OriginCountry { get; set; }

        /// <summary>
        /// Gets or Sets Methods
        /// </summary>
        [DataMember(Name = "methods", EmitDefaultValue = false)]
        [JsonPropertyName("methods")]
        public VPNMethods Methods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookVPN {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  OriginTimezone: ").Append(OriginTimezone).Append("\n");
            sb.Append("  OriginCountry: ").Append(OriginCountry).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonUtils.Serialize(this);
        }

        /// <summary>
        /// Returns true if WebhookVPN instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookVPN to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookVPN input)
        {
            if (input == null)
                return false;

            return
                (
                this.Result == input.Result ||
                (this.Result != null &&
                this.Result.Equals(input.Result))
                ) &&
                (
                this.Confidence == input.Confidence ||
                (this.Confidence != null &&
                this.Confidence.Equals(input.Confidence))
                ) &&
                (
                this.OriginTimezone == input.OriginTimezone ||
                (this.OriginTimezone != null &&
                this.OriginTimezone.Equals(input.OriginTimezone))
                ) &&
                (
                this.OriginCountry == input.OriginCountry ||
                (this.OriginCountry != null &&
                this.OriginCountry.Equals(input.OriginCountry))
                ) &&
                (
                this.Methods == input.Methods ||
                (this.Methods != null &&
                this.Methods.Equals(input.Methods))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.OriginTimezone != null)
                    hashCode = hashCode * 59 + this.OriginTimezone.GetHashCode();
                if (this.OriginCountry != null)
                    hashCode = hashCode * 59 + this.OriginCountry.GetHashCode();
                if (this.Methods != null)
                    hashCode = hashCode * 59 + this.Methods.GetHashCode();
                return hashCode;
            }
        }

    }
}
