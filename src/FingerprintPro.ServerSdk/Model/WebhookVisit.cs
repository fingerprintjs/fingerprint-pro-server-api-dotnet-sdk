/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FingerprintPro.ServerSdk.Model
{
    /// <summary>
    /// WebhookVisit
    /// </summary>
    [DataContract]
    public partial class WebhookVisit : IEquatable<WebhookVisit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookVisit" /> class.
        /// </summary>
        /// <param name="visitorId">visitorId (required).</param>
        /// <param name="clientReferrer">clientReferrer.</param>
        /// <param name="userAgent">userAgent.</param>
        /// <param name="bot">bot.</param>
        /// <param name="ipInfo">ipInfo.</param>
        /// <param name="incognito">Flag if user used incognito session. (required).</param>
        /// <param name="rootApps">rootApps.</param>
        /// <param name="emulator">emulator.</param>
        /// <param name="ipBlocklist">ipBlocklist.</param>
        /// <param name="tor">tor.</param>
        /// <param name="vpn">vpn.</param>
        /// <param name="proxy">proxy.</param>
        /// <param name="tampering">tampering.</param>
        /// <param name="requestId">Unique identifier of the user&#x27;s identification request. (required).</param>
        /// <param name="browserDetails">browserDetails (required).</param>
        /// <param name="ip">ip (required).</param>
        /// <param name="ipLocation">ipLocation (required).</param>
        /// <param name="timestamp">Timestamp of the event with millisecond precision in Unix time. (required).</param>
        /// <param name="time">Time expressed according to ISO 8601 in UTC format. (required).</param>
        /// <param name="url">Page URL from which identification request was sent. (required).</param>
        /// <param name="tag">A customer-provided value or an object that was sent with identification request..</param>
        /// <param name="linkedId">A customer-provided id that was sent with identification request..</param>
        /// <param name="confidence">confidence (required).</param>
        /// <param name="visitorFound">Attribute represents if a visitor had been identified before. (required).</param>
        /// <param name="firstSeenAt">firstSeenAt (required).</param>
        /// <param name="lastSeenAt">lastSeenAt (required).</param>
        public WebhookVisit(string visitorId = default(string), string clientReferrer = default(string), string userAgent = default(string), BotdDetectionResult bot = default(BotdDetectionResult), IpInfoResult ipInfo = default(IpInfoResult), bool? incognito = default(bool?), WebhookSignalResponseRootApps rootApps = default(WebhookSignalResponseRootApps), WebhookSignalResponseEmulator emulator = default(WebhookSignalResponseEmulator), IpBlockListResult ipBlocklist = default(IpBlockListResult), WebhookSignalResponseTor tor = default(WebhookSignalResponseTor), VpnResult vpn = default(VpnResult), WebhookSignalResponseProxy proxy = default(WebhookSignalResponseProxy), TamperingResult tampering = default(TamperingResult), string requestId = default(string), BrowserDetails browserDetails = default(BrowserDetails), string ip = default(string), IPLocation ipLocation = default(IPLocation), long? timestamp = default(long?), DateTime? time = default(DateTime?), string url = default(string), Dictionary<string, Object> tag = default(Dictionary<string, Object>), string linkedId = default(string), Confidence confidence = default(Confidence), bool? visitorFound = default(bool?), SeenAt firstSeenAt = default(SeenAt), SeenAt lastSeenAt = default(SeenAt))
        {
            // to ensure "visitorId" is required (not null)

            if (visitorId == null)
            {
                throw new InvalidDataException("visitorId is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.VisitorId = visitorId;
            }
            // to ensure "incognito" is required (not null)

            if (incognito == null)
            {
                throw new InvalidDataException("incognito is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Incognito = incognito;
            }
            // to ensure "requestId" is required (not null)

            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "browserDetails" is required (not null)

            if (browserDetails == null)
            {
                throw new InvalidDataException("browserDetails is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.BrowserDetails = browserDetails;
            }
            // to ensure "ip" is required (not null)

            if (ip == null)
            {
                throw new InvalidDataException("ip is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Ip = ip;
            }
            // to ensure "ipLocation" is required (not null)

            if (ipLocation == null)
            {
                throw new InvalidDataException("ipLocation is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.IpLocation = ipLocation;
            }
            // to ensure "timestamp" is required (not null)

            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "time" is required (not null)

            if (time == null)
            {
                throw new InvalidDataException("time is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            // to ensure "url" is required (not null)

            if (url == null)
            {
                throw new InvalidDataException("url is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "confidence" is required (not null)

            if (confidence == null)
            {
                throw new InvalidDataException("confidence is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.Confidence = confidence;
            }
            // to ensure "visitorFound" is required (not null)

            if (visitorFound == null)
            {
                throw new InvalidDataException("visitorFound is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.VisitorFound = visitorFound;
            }
            // to ensure "firstSeenAt" is required (not null)

            if (firstSeenAt == null)
            {
                throw new InvalidDataException("firstSeenAt is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.FirstSeenAt = firstSeenAt;
            }
            // to ensure "lastSeenAt" is required (not null)

            if (lastSeenAt == null)
            {
                throw new InvalidDataException("lastSeenAt is a required property for WebhookVisit and cannot be null");
            }
            else
            {
                this.LastSeenAt = lastSeenAt;
            }
            this.ClientReferrer = clientReferrer;
            this.UserAgent = userAgent;
            this.Bot = bot;
            this.IpInfo = ipInfo;
            this.RootApps = rootApps;
            this.Emulator = emulator;
            this.IpBlocklist = ipBlocklist;
            this.Tor = tor;
            this.Vpn = vpn;
            this.Proxy = proxy;
            this.Tampering = tampering;
            this.Tag = tag;
            this.LinkedId = linkedId;
        }

        /// <summary>
        /// Gets or Sets VisitorId
        /// </summary>
        [DataMember(Name = "visitorId", EmitDefaultValue = false)]
        public string VisitorId { get; set; }

        /// <summary>
        /// Gets or Sets ClientReferrer
        /// </summary>
        [DataMember(Name = "clientReferrer", EmitDefaultValue = false)]
        public string ClientReferrer { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name = "userAgent", EmitDefaultValue = false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets Bot
        /// </summary>
        [DataMember(Name = "bot", EmitDefaultValue = false)]
        public BotdDetectionResult Bot { get; set; }

        /// <summary>
        /// Gets or Sets IpInfo
        /// </summary>
        [DataMember(Name = "ipInfo", EmitDefaultValue = false)]
        public IpInfoResult IpInfo { get; set; }

        /// <summary>
        /// Flag if user used incognito session.
        /// </summary>
        /// <value>Flag if user used incognito session.</value>
        [DataMember(Name = "incognito", EmitDefaultValue = false)]
        public bool? Incognito { get; set; }

        /// <summary>
        /// Gets or Sets RootApps
        /// </summary>
        [DataMember(Name = "rootApps", EmitDefaultValue = false)]
        public WebhookSignalResponseRootApps RootApps { get; set; }

        /// <summary>
        /// Gets or Sets Emulator
        /// </summary>
        [DataMember(Name = "emulator", EmitDefaultValue = false)]
        public WebhookSignalResponseEmulator Emulator { get; set; }

        /// <summary>
        /// Gets or Sets IpBlocklist
        /// </summary>
        [DataMember(Name = "ipBlocklist", EmitDefaultValue = false)]
        public IpBlockListResult IpBlocklist { get; set; }

        /// <summary>
        /// Gets or Sets Tor
        /// </summary>
        [DataMember(Name = "tor", EmitDefaultValue = false)]
        public WebhookSignalResponseTor Tor { get; set; }

        /// <summary>
        /// Gets or Sets Vpn
        /// </summary>
        [DataMember(Name = "vpn", EmitDefaultValue = false)]
        public VpnResult Vpn { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name = "proxy", EmitDefaultValue = false)]
        public WebhookSignalResponseProxy Proxy { get; set; }

        /// <summary>
        /// Gets or Sets Tampering
        /// </summary>
        [DataMember(Name = "tampering", EmitDefaultValue = false)]
        public TamperingResult Tampering { get; set; }

        /// <summary>
        /// Unique identifier of the user&#x27;s identification request.
        /// </summary>
        /// <value>Unique identifier of the user&#x27;s identification request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets BrowserDetails
        /// </summary>
        [DataMember(Name = "browserDetails", EmitDefaultValue = false)]
        public BrowserDetails BrowserDetails { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets IpLocation
        /// </summary>
        [DataMember(Name = "ipLocation", EmitDefaultValue = false)]
        public IPLocation IpLocation { get; set; }

        /// <summary>
        /// Timestamp of the event with millisecond precision in Unix time.
        /// </summary>
        /// <value>Timestamp of the event with millisecond precision in Unix time.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Time expressed according to ISO 8601 in UTC format.
        /// </summary>
        /// <value>Time expressed according to ISO 8601 in UTC format.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Page URL from which identification request was sent.
        /// </summary>
        /// <value>Page URL from which identification request was sent.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// A customer-provided value or an object that was sent with identification request.
        /// </summary>
        /// <value>A customer-provided value or an object that was sent with identification request.</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public Dictionary<string, Object> Tag { get; set; }

        /// <summary>
        /// A customer-provided id that was sent with identification request.
        /// </summary>
        /// <value>A customer-provided id that was sent with identification request.</value>
        [DataMember(Name = "linkedId", EmitDefaultValue = false)]
        public string LinkedId { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public Confidence Confidence { get; set; }

        /// <summary>
        /// Attribute represents if a visitor had been identified before.
        /// </summary>
        /// <value>Attribute represents if a visitor had been identified before.</value>
        [DataMember(Name = "visitorFound", EmitDefaultValue = false)]
        public bool? VisitorFound { get; set; }

        /// <summary>
        /// Gets or Sets FirstSeenAt
        /// </summary>
        [DataMember(Name = "firstSeenAt", EmitDefaultValue = false)]
        public SeenAt FirstSeenAt { get; set; }

        /// <summary>
        /// Gets or Sets LastSeenAt
        /// </summary>
        [DataMember(Name = "lastSeenAt", EmitDefaultValue = false)]
        public SeenAt LastSeenAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookVisit {\n");
            sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
            sb.Append("  ClientReferrer: ").Append(ClientReferrer).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("  IpInfo: ").Append(IpInfo).Append("\n");
            sb.Append("  Incognito: ").Append(Incognito).Append("\n");
            sb.Append("  RootApps: ").Append(RootApps).Append("\n");
            sb.Append("  Emulator: ").Append(Emulator).Append("\n");
            sb.Append("  IpBlocklist: ").Append(IpBlocklist).Append("\n");
            sb.Append("  Tor: ").Append(Tor).Append("\n");
            sb.Append("  Vpn: ").Append(Vpn).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  Tampering: ").Append(Tampering).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  BrowserDetails: ").Append(BrowserDetails).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  IpLocation: ").Append(IpLocation).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  LinkedId: ").Append(LinkedId).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  VisitorFound: ").Append(VisitorFound).Append("\n");
            sb.Append("  FirstSeenAt: ").Append(FirstSeenAt).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if WebhookVisit instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookVisit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookVisit input)
        {
            if (input == null)
                return false;

            return
                (
                this.VisitorId == input.VisitorId ||
                (this.VisitorId != null &&
                this.VisitorId.Equals(input.VisitorId))
                ) &&
                (
                this.ClientReferrer == input.ClientReferrer ||
                (this.ClientReferrer != null &&
                this.ClientReferrer.Equals(input.ClientReferrer))
                ) &&
                (
                this.UserAgent == input.UserAgent ||
                (this.UserAgent != null &&
                this.UserAgent.Equals(input.UserAgent))
                ) &&
                (
                this.Bot == input.Bot ||
                (this.Bot != null &&
                this.Bot.Equals(input.Bot))
                ) &&
                (
                this.IpInfo == input.IpInfo ||
                (this.IpInfo != null &&
                this.IpInfo.Equals(input.IpInfo))
                ) &&
                (
                this.Incognito == input.Incognito ||
                (this.Incognito != null &&
                this.Incognito.Equals(input.Incognito))
                ) &&
                (
                this.RootApps == input.RootApps ||
                (this.RootApps != null &&
                this.RootApps.Equals(input.RootApps))
                ) &&
                (
                this.Emulator == input.Emulator ||
                (this.Emulator != null &&
                this.Emulator.Equals(input.Emulator))
                ) &&
                (
                this.IpBlocklist == input.IpBlocklist ||
                (this.IpBlocklist != null &&
                this.IpBlocklist.Equals(input.IpBlocklist))
                ) &&
                (
                this.Tor == input.Tor ||
                (this.Tor != null &&
                this.Tor.Equals(input.Tor))
                ) &&
                (
                this.Vpn == input.Vpn ||
                (this.Vpn != null &&
                this.Vpn.Equals(input.Vpn))
                ) &&
                (
                this.Proxy == input.Proxy ||
                (this.Proxy != null &&
                this.Proxy.Equals(input.Proxy))
                ) &&
                (
                this.Tampering == input.Tampering ||
                (this.Tampering != null &&
                this.Tampering.Equals(input.Tampering))
                ) &&
                (
                this.RequestId == input.RequestId ||
                (this.RequestId != null &&
                this.RequestId.Equals(input.RequestId))
                ) &&
                (
                this.BrowserDetails == input.BrowserDetails ||
                (this.BrowserDetails != null &&
                this.BrowserDetails.Equals(input.BrowserDetails))
                ) &&
                (
                this.Ip == input.Ip ||
                (this.Ip != null &&
                this.Ip.Equals(input.Ip))
                ) &&
                (
                this.IpLocation == input.IpLocation ||
                (this.IpLocation != null &&
                this.IpLocation.Equals(input.IpLocation))
                ) &&
                (
                this.Timestamp == input.Timestamp ||
                (this.Timestamp != null &&
                this.Timestamp.Equals(input.Timestamp))
                ) &&
                (
                this.Time == input.Time ||
                (this.Time != null &&
                this.Time.Equals(input.Time))
                ) &&
                (
                this.Url == input.Url ||
                (this.Url != null &&
                this.Url.Equals(input.Url))
                ) &&
                (
                this.Tag == input.Tag ||
                this.Tag != null &&
                input.Tag != null &&
                this.Tag.SequenceEqual(input.Tag)
                ) &&
                (
                this.LinkedId == input.LinkedId ||
                (this.LinkedId != null &&
                this.LinkedId.Equals(input.LinkedId))
                ) &&
                (
                this.Confidence == input.Confidence ||
                (this.Confidence != null &&
                this.Confidence.Equals(input.Confidence))
                ) &&
                (
                this.VisitorFound == input.VisitorFound ||
                (this.VisitorFound != null &&
                this.VisitorFound.Equals(input.VisitorFound))
                ) &&
                (
                this.FirstSeenAt == input.FirstSeenAt ||
                (this.FirstSeenAt != null &&
                this.FirstSeenAt.Equals(input.FirstSeenAt))
                ) &&
                (
                this.LastSeenAt == input.LastSeenAt ||
                (this.LastSeenAt != null &&
                this.LastSeenAt.Equals(input.LastSeenAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VisitorId != null)
                    hashCode = hashCode * 59 + this.VisitorId.GetHashCode();
                if (this.ClientReferrer != null)
                    hashCode = hashCode * 59 + this.ClientReferrer.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.Bot != null)
                    hashCode = hashCode * 59 + this.Bot.GetHashCode();
                if (this.IpInfo != null)
                    hashCode = hashCode * 59 + this.IpInfo.GetHashCode();
                if (this.Incognito != null)
                    hashCode = hashCode * 59 + this.Incognito.GetHashCode();
                if (this.RootApps != null)
                    hashCode = hashCode * 59 + this.RootApps.GetHashCode();
                if (this.Emulator != null)
                    hashCode = hashCode * 59 + this.Emulator.GetHashCode();
                if (this.IpBlocklist != null)
                    hashCode = hashCode * 59 + this.IpBlocklist.GetHashCode();
                if (this.Tor != null)
                    hashCode = hashCode * 59 + this.Tor.GetHashCode();
                if (this.Vpn != null)
                    hashCode = hashCode * 59 + this.Vpn.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.Tampering != null)
                    hashCode = hashCode * 59 + this.Tampering.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.BrowserDetails != null)
                    hashCode = hashCode * 59 + this.BrowserDetails.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.IpLocation != null)
                    hashCode = hashCode * 59 + this.IpLocation.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.LinkedId != null)
                    hashCode = hashCode * 59 + this.LinkedId.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.VisitorFound != null)
                    hashCode = hashCode * 59 + this.VisitorFound.GetHashCode();
                if (this.FirstSeenAt != null)
                    hashCode = hashCode * 59 + this.FirstSeenAt.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                return hashCode;
            }
        }

    }
}