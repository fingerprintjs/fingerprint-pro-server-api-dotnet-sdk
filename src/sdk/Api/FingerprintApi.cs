/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.ObjectModel;
using RestSharp;
using sdk.Client;
using sdk.Model;

namespace sdk.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IFingerprintApi : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    ///     Get event by requestId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get events with all the information from each activated product (Fingerprint Pro or Bot
    ///     Detection). Use the requestId as a URL path :request_id parameter. This API method is scoped to a request, i.e. all
    ///     returned information is by requestId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>EventResponse</returns>
    EventResponse GetEvent(string requestId);

    /// <summary>
    ///     Get event by requestId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get events with all the information from each activated product (Fingerprint Pro or Bot
    ///     Detection). Use the requestId as a URL path :request_id parameter. This API method is scoped to a request, i.e. all
    ///     returned information is by requestId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>ApiResponse of EventResponse</returns>
    ApiResponse<EventResponse> GetEventWithHttpInfo(string requestId);

    /// <summary>
    ///     Get visits by visitorId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path
    ///     parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Response</returns>
    Response GetVisits(string visitorId, string requestId = null, string linkedId = null, int? limit = null,
        int? before = null);

    /// <summary>
    ///     Get visits by visitorId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path
    ///     parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>ApiResponse of Response</returns>
    ApiResponse<Response> GetVisitsWithHttpInfo(string visitorId, string requestId = null, string linkedId = null,
        int? limit = null, int? before = null);

    #endregion Synchronous Operations

    #region Asynchronous Operations

    /// <summary>
    ///     Get event by requestId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get events with all the information from each activated product (Fingerprint Pro or Bot
    ///     Detection). Use the requestId as a URL path :request_id parameter. This API method is scoped to a request, i.e. all
    ///     returned information is by requestId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>Task of EventResponse</returns>
    Task<EventResponse> GetEventAsync(string requestId);

    /// <summary>
    ///     Get event by requestId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get events with all the information from each activated product (Fingerprint Pro or Bot
    ///     Detection). Use the requestId as a URL path :request_id parameter. This API method is scoped to a request, i.e. all
    ///     returned information is by requestId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>Task of ApiResponse (EventResponse)</returns>
    Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo(string requestId);

    /// <summary>
    ///     Get visits by visitorId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path
    ///     parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Task of Response</returns>
    Task<Response> GetVisitsAsync(string visitorId, string requestId = null,
        string linkedId = null, int? limit = null, int? before = null);

    /// <summary>
    ///     Get visits by visitorId
    /// </summary>
    /// <remarks>
    ///     This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path
    ///     parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
    /// </remarks>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Task of ApiResponse (Response)</returns>
    Task<ApiResponse<Response>> GetVisitsAsyncWithHttpInfo(string visitorId,
        string requestId = null, string linkedId = null, int? limit = null, int? before = null);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class FingerprintApi : IFingerprintApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="FingerprintApi" /> class.
    /// </summary>
    /// <returns></returns>
    public FingerprintApi(string basePath)
    {
        Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="FingerprintApi" /> class
    /// </summary>
    /// <returns></returns>
    public FingerprintApi()
    {
        Configuration = Configuration.Default;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="FingerprintApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public FingerprintApi(Configuration configuration = null)
    {
        if (configuration == null) // use the default one in Configuration
            Configuration = Configuration.Default;
        else
            Configuration = configuration;

        ExceptionFactory = Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.ApiClient.RestClient.BaseUrl.ToString();
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Configuration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Get event by requestId This endpoint allows you to get events with all the information from each activated product
    ///     (Fingerprint Pro or Bot Detection). Use the requestId as a URL path :request_id parameter. This API method is
    ///     scoped to a request, i.e. all returned information is by requestId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>EventResponse</returns>
    public EventResponse GetEvent(string requestId)
    {
        var localVarResponse = GetEventWithHttpInfo(requestId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get event by requestId This endpoint allows you to get events with all the information from each activated product
    ///     (Fingerprint Pro or Bot Detection). Use the requestId as a URL path :request_id parameter. This API method is
    ///     scoped to a request, i.e. all returned information is by requestId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>ApiResponse of EventResponse</returns>
    public ApiResponse<EventResponse> GetEventWithHttpInfo(string requestId)
    {
        // verify the required parameter 'requestId' is set
        if (requestId == null)
            throw new ApiException(400,
                "Missing required parameter 'requestId' when calling FingerprintApi->GetEvent");

        var localVarPath = "/events/{request_id}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes =
        {
        };
        var localVarHttpContentType =
            Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts =
        {
            "application/json"
        };
        var localVarHttpHeaderAccept =
            Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (requestId != null)
            localVarPathParams.Add("request_id",
                Configuration.ApiClient.ParameterToString(requestId)); // path parameter
        // authentication (ApiKeyHeader) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Auth-API-Key")))
            localVarHeaderParams["Auth-API-Key"] = Configuration.GetApiKeyWithPrefix("Auth-API-Key");

        // authentication (ApiKeyQuery) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key",
                Configuration.GetApiKeyWithPrefix("api_key")));

        // make the HTTP request
        var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEvent", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<EventResponse>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (EventResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
    }

    /// <summary>
    ///     Get event by requestId This endpoint allows you to get events with all the information from each activated product
    ///     (Fingerprint Pro or Bot Detection). Use the requestId as a URL path :request_id parameter. This API method is
    ///     scoped to a request, i.e. all returned information is by requestId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>Task of EventResponse</returns>
    public async Task<EventResponse> GetEventAsync(string requestId)
    {
        var localVarResponse = await GetEventAsyncWithHttpInfo(requestId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get event by requestId This endpoint allows you to get events with all the information from each activated product
    ///     (Fingerprint Pro or Bot Detection). Use the requestId as a URL path :request_id parameter. This API method is
    ///     scoped to a request, i.e. all returned information is by requestId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="requestId">requestId is the unique identifier of each request</param>
    /// <returns>Task of ApiResponse (EventResponse)</returns>
    public async Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo(string requestId)
    {
        // verify the required parameter 'requestId' is set
        if (requestId == null)
            throw new ApiException(400,
                "Missing required parameter 'requestId' when calling FingerprintApi->GetEvent");

        var localVarPath = "/events/{request_id}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes =
        {
        };
        var localVarHttpContentType =
            Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts =
        {
            "application/json"
        };
        var localVarHttpHeaderAccept =
            Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (requestId != null)
            localVarPathParams.Add("request_id",
                Configuration.ApiClient.ParameterToString(requestId)); // path parameter
        // authentication (ApiKeyHeader) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Auth-API-Key")))
            localVarHeaderParams["Auth-API-Key"] = Configuration.GetApiKeyWithPrefix("Auth-API-Key");

        // authentication (ApiKeyQuery) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key",
                Configuration.GetApiKeyWithPrefix("api_key")));

        // make the HTTP request
        var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
            localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEvent", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<EventResponse>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (EventResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
    }

    /// <summary>
    ///     Get visits by visitorId This endpoint allows you to get a history of visits with all available information. Use the
    ///     visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by
    ///     visitorId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Response</returns>
    public Response GetVisits(string visitorId, string requestId = null, string linkedId = null, int? limit = null,
        int? before = null)
    {
        var localVarResponse =
            GetVisitsWithHttpInfo(visitorId, requestId, linkedId, limit, before);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get visits by visitorId This endpoint allows you to get a history of visits with all available information. Use the
    ///     visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by
    ///     visitorId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>ApiResponse of Response</returns>
    public ApiResponse<Response> GetVisitsWithHttpInfo(string visitorId, string requestId = null,
        string linkedId = null, int? limit = null, int? before = null)
    {
        // verify the required parameter 'visitorId' is set
        if (visitorId == null)
            throw new ApiException(400,
                "Missing required parameter 'visitorId' when calling FingerprintApi->GetVisits");

        var localVarPath = "/visitors/{visitor_id}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes =
        {
        };
        var localVarHttpContentType =
            Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts =
        {
            "application/json"
        };
        var localVarHttpHeaderAccept =
            Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (visitorId != null)
            localVarPathParams.Add("visitor_id",
                Configuration.ApiClient.ParameterToString(visitorId)); // path parameter
        if (requestId != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "request_id",
                    requestId)); // query parameter
        if (linkedId != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "linked_id",
                    linkedId)); // query parameter
        if (limit != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
        if (before != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
        // authentication (ApiKeyHeader) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Auth-API-Key")))
            localVarHeaderParams["Auth-API-Key"] = Configuration.GetApiKeyWithPrefix("Auth-API-Key");

        // authentication (ApiKeyQuery) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key",
                Configuration.GetApiKeyWithPrefix("api_key")));

        // make the HTTP request
        var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetVisits", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<Response>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (Response)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
    }

    /// <summary>
    ///     Get visits by visitorId This endpoint allows you to get a history of visits with all available information. Use the
    ///     visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by
    ///     visitorId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Task of Response</returns>
    public async Task<Response> GetVisitsAsync(string visitorId, string requestId = null,
        string linkedId = null, int? limit = null, int? before = null)
    {
        var localVarResponse =
            await GetVisitsAsyncWithHttpInfo(visitorId, requestId, linkedId, limit, before);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get visits by visitorId This endpoint allows you to get a history of visits with all available information. Use the
    ///     visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by
    ///     visitorId.
    /// </summary>
    /// <exception cref="sdk.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="visitorId"></param>
    /// <param name="requestId">Filter visits by requestId (optional)</param>
    /// <param name="linkedId">Filter visits by custom identifier (optional)</param>
    /// <param name="limit">Limit scanned results (optional)</param>
    /// <param name="before">Used to paginate results (optional)</param>
    /// <returns>Task of ApiResponse (Response)</returns>
    public async Task<ApiResponse<Response>> GetVisitsAsyncWithHttpInfo(string visitorId,
        string requestId = null, string linkedId = null, int? limit = null, int? before = null)
    {
        // verify the required parameter 'visitorId' is set
        if (visitorId == null)
            throw new ApiException(400,
                "Missing required parameter 'visitorId' when calling FingerprintApi->GetVisits");

        var localVarPath = "/visitors/{visitor_id}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes =
        {
        };
        var localVarHttpContentType =
            Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts =
        {
            "application/json"
        };
        var localVarHttpHeaderAccept =
            Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (visitorId != null)
            localVarPathParams.Add("visitor_id",
                Configuration.ApiClient.ParameterToString(visitorId)); // path parameter
        if (requestId != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "request_id",
                    requestId)); // query parameter
        if (linkedId != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "linked_id",
                    linkedId)); // query parameter
        if (limit != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
        if (before != null)
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
        // authentication (ApiKeyHeader) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Auth-API-Key")))
            localVarHeaderParams["Auth-API-Key"] = Configuration.GetApiKeyWithPrefix("Auth-API-Key");

        // authentication (ApiKeyQuery) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key",
                Configuration.GetApiKeyWithPrefix("api_key")));

        // make the HTTP request
        var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
            localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
            localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        var localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetVisits", localVarResponse);
            if (exception != null) throw exception;
        }

        return new ApiResponse<Response>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (Response)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
    }

    /// <summary>
    ///     Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete(
        "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    ///     Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
    public IDictionary<string, string> DefaultHeader()
    {
        return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
    }

    /// <summary>
    ///     Add default header.
    /// </summary>
    /// <param name="key">Header field name.</param>
    /// <param name="value">Header field value.</param>
    /// <returns></returns>
    [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
    public void AddDefaultHeader(string key, string value)
    {
        Configuration.AddDefaultHeader(key, value);
    }
}