/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace sdk.Model;

/// <summary>
///     BrowserDetails
/// </summary>
[DataContract]
public class BrowserDetails : IEquatable<BrowserDetails>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="BrowserDetails" /> class.
    /// </summary>
    /// <param name="browserName">browserName (required).</param>
    /// <param name="browserMajorVersion">browserMajorVersion (required).</param>
    /// <param name="browserFullVersion">browserFullVersion (required).</param>
    /// <param name="os">os (required).</param>
    /// <param name="osVersion">osVersion (required).</param>
    /// <param name="device">device (required).</param>
    /// <param name="userAgent">userAgent (required).</param>
    /// <param name="botProbability">botProbability.</param>
    public BrowserDetails(string browserName = default, string browserMajorVersion = default,
        string browserFullVersion = default, string os = default,
        string osVersion = default, string device = default, string userAgent = default,
        int? botProbability = default)
    {
        // to ensure "browserName" is required (not null)

        if (browserName == null)
            throw new InvalidDataException(
                "browserName is a required property for BrowserDetails and cannot be null");
        BrowserName = browserName;
        // to ensure "browserMajorVersion" is required (not null)

        if (browserMajorVersion == null)
            throw new InvalidDataException(
                "browserMajorVersion is a required property for BrowserDetails and cannot be null");
        BrowserMajorVersion = browserMajorVersion;
        // to ensure "browserFullVersion" is required (not null)

        if (browserFullVersion == null)
            throw new InvalidDataException(
                "browserFullVersion is a required property for BrowserDetails and cannot be null");
        BrowserFullVersion = browserFullVersion;
        // to ensure "os" is required (not null)

        if (os == null)
            throw new InvalidDataException("os is a required property for BrowserDetails and cannot be null");
        Os = os;
        // to ensure "osVersion" is required (not null)

        if (osVersion == null)
            throw new InvalidDataException(
                "osVersion is a required property for BrowserDetails and cannot be null");
        OsVersion = osVersion;
        // to ensure "device" is required (not null)

        if (device == null)
            throw new InvalidDataException("device is a required property for BrowserDetails and cannot be null");
        Device = device;
        // to ensure "userAgent" is required (not null)

        if (userAgent == null)
            throw new InvalidDataException(
                "userAgent is a required property for BrowserDetails and cannot be null");
        UserAgent = userAgent;

        BotProbability = botProbability;
    }

    /// <summary>
    ///     Gets or Sets BrowserName
    /// </summary>
    [DataMember(Name = "browserName", EmitDefaultValue = false)]
    public string BrowserName { get; set; }

    /// <summary>
    ///     Gets or Sets BrowserMajorVersion
    /// </summary>
    [DataMember(Name = "browserMajorVersion", EmitDefaultValue = false)]
    public string BrowserMajorVersion { get; set; }

    /// <summary>
    ///     Gets or Sets BrowserFullVersion
    /// </summary>
    [DataMember(Name = "browserFullVersion", EmitDefaultValue = false)]
    public string BrowserFullVersion { get; set; }

    /// <summary>
    ///     Gets or Sets Os
    /// </summary>
    [DataMember(Name = "os", EmitDefaultValue = false)]
    public string Os { get; set; }

    /// <summary>
    ///     Gets or Sets OsVersion
    /// </summary>
    [DataMember(Name = "osVersion", EmitDefaultValue = false)]
    public string OsVersion { get; set; }

    /// <summary>
    ///     Gets or Sets Device
    /// </summary>
    [DataMember(Name = "device", EmitDefaultValue = false)]
    public string Device { get; set; }

    /// <summary>
    ///     Gets or Sets UserAgent
    /// </summary>
    [DataMember(Name = "userAgent", EmitDefaultValue = false)]
    public string UserAgent { get; set; }

    /// <summary>
    ///     Gets or Sets BotProbability
    /// </summary>
    [DataMember(Name = "botProbability", EmitDefaultValue = false)]
    public int? BotProbability { get; set; }

    /// <summary>
    ///     Returns true if BrowserDetails instances are equal
    /// </summary>
    /// <param name="input">Instance of BrowserDetails to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(BrowserDetails input)
    {
        if (input == null)
            return false;

        return
            (
                BrowserName == input.BrowserName ||
                (BrowserName != null &&
                 BrowserName.Equals(input.BrowserName))
            ) &&
            (
                BrowserMajorVersion == input.BrowserMajorVersion ||
                (BrowserMajorVersion != null &&
                 BrowserMajorVersion.Equals(input.BrowserMajorVersion))
            ) &&
            (
                BrowserFullVersion == input.BrowserFullVersion ||
                (BrowserFullVersion != null &&
                 BrowserFullVersion.Equals(input.BrowserFullVersion))
            ) &&
            (
                Os == input.Os ||
                (Os != null &&
                 Os.Equals(input.Os))
            ) &&
            (
                OsVersion == input.OsVersion ||
                (OsVersion != null &&
                 OsVersion.Equals(input.OsVersion))
            ) &&
            (
                Device == input.Device ||
                (Device != null &&
                 Device.Equals(input.Device))
            ) &&
            (
                UserAgent == input.UserAgent ||
                (UserAgent != null &&
                 UserAgent.Equals(input.UserAgent))
            ) &&
            (
                BotProbability == input.BotProbability ||
                (BotProbability != null &&
                 BotProbability.Equals(input.BotProbability))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(
        ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class BrowserDetails {\n");
        sb.Append("  BrowserName: ").Append(BrowserName).Append("\n");
        sb.Append("  BrowserMajorVersion: ").Append(BrowserMajorVersion).Append("\n");
        sb.Append("  BrowserFullVersion: ").Append(BrowserFullVersion).Append("\n");
        sb.Append("  Os: ").Append(Os).Append("\n");
        sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
        sb.Append("  Device: ").Append(Device).Append("\n");
        sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
        sb.Append("  BotProbability: ").Append(BotProbability).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as BrowserDetails);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (BrowserName != null)
                hashCode = hashCode * 59 + BrowserName.GetHashCode();
            if (BrowserMajorVersion != null)
                hashCode = hashCode * 59 + BrowserMajorVersion.GetHashCode();
            if (BrowserFullVersion != null)
                hashCode = hashCode * 59 + BrowserFullVersion.GetHashCode();
            if (Os != null)
                hashCode = hashCode * 59 + Os.GetHashCode();
            if (OsVersion != null)
                hashCode = hashCode * 59 + OsVersion.GetHashCode();
            if (Device != null)
                hashCode = hashCode * 59 + Device.GetHashCode();
            if (UserAgent != null)
                hashCode = hashCode * 59 + UserAgent.GetHashCode();
            if (BotProbability != null)
                hashCode = hashCode * 59 + BotProbability.GetHashCode();
            return hashCode;
        }
    }
}