/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace sdk.Model;

/// <summary>
///     IPLocation
/// </summary>
[DataContract]
public class IPLocation : IEquatable<IPLocation>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="IPLocation" /> class.
    /// </summary>
    /// <param name="accuracyRadius">accuracyRadius (required).</param>
    /// <param name="latitude">latitude (required).</param>
    /// <param name="longitude">longitude (required).</param>
    /// <param name="postalCode">postalCode.</param>
    /// <param name="timezone">timezone (required).</param>
    /// <param name="city">city.</param>
    /// <param name="country">country (required).</param>
    /// <param name="continent">continent (required).</param>
    /// <param name="subdivisions">subdivisions.</param>
    public IPLocation(int? accuracyRadius = default, double? latitude = default,
        double? longitude = default, string postalCode = default,
        string timezone = default, IPLocationCity city = default,
        Location country = default, Location continent = default,
        List<Subdivision> subdivisions = default)
    {
        // to ensure "accuracyRadius" is required (not null)

        if (accuracyRadius == null)
            throw new InvalidDataException(
                "accuracyRadius is a required property for IPLocation and cannot be null");
        AccuracyRadius = accuracyRadius;
        // to ensure "latitude" is required (not null)

        if (latitude == null)
            throw new InvalidDataException("latitude is a required property for IPLocation and cannot be null");
        Latitude = latitude;
        // to ensure "longitude" is required (not null)

        if (longitude == null)
            throw new InvalidDataException("longitude is a required property for IPLocation and cannot be null");
        Longitude = longitude;
        // to ensure "timezone" is required (not null)

        if (timezone == null)
            throw new InvalidDataException("timezone is a required property for IPLocation and cannot be null");
        Timezone = timezone;
        // to ensure "country" is required (not null)

        if (country == null)
            throw new InvalidDataException("country is a required property for IPLocation and cannot be null");
        Country = country;
        // to ensure "continent" is required (not null)

        if (continent == null)
            throw new InvalidDataException("continent is a required property for IPLocation and cannot be null");
        Continent = continent;

        PostalCode = postalCode;
        City = city;
        Subdivisions = subdivisions;
    }

    /// <summary>
    ///     Gets or Sets AccuracyRadius
    /// </summary>
    [DataMember(Name = "accuracyRadius", EmitDefaultValue = false)]
    public int? AccuracyRadius { get; set; }

    /// <summary>
    ///     Gets or Sets Latitude
    /// </summary>
    [DataMember(Name = "latitude", EmitDefaultValue = false)]
    public double? Latitude { get; set; }

    /// <summary>
    ///     Gets or Sets Longitude
    /// </summary>
    [DataMember(Name = "longitude", EmitDefaultValue = false)]
    public double? Longitude { get; set; }

    /// <summary>
    ///     Gets or Sets PostalCode
    /// </summary>
    [DataMember(Name = "postalCode", EmitDefaultValue = false)]
    public string PostalCode { get; set; }

    /// <summary>
    ///     Gets or Sets Timezone
    /// </summary>
    [DataMember(Name = "timezone", EmitDefaultValue = false)]
    public string Timezone { get; set; }

    /// <summary>
    ///     Gets or Sets City
    /// </summary>
    [DataMember(Name = "city", EmitDefaultValue = false)]
    public IPLocationCity City { get; set; }

    /// <summary>
    ///     Gets or Sets Country
    /// </summary>
    [DataMember(Name = "country", EmitDefaultValue = false)]
    public Location Country { get; set; }

    /// <summary>
    ///     Gets or Sets Continent
    /// </summary>
    [DataMember(Name = "continent", EmitDefaultValue = false)]
    public Location Continent { get; set; }

    /// <summary>
    ///     Gets or Sets Subdivisions
    /// </summary>
    [DataMember(Name = "subdivisions", EmitDefaultValue = false)]
    public List<Subdivision> Subdivisions { get; set; }

    /// <summary>
    ///     Returns true if IPLocation instances are equal
    /// </summary>
    /// <param name="input">Instance of IPLocation to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(IPLocation input)
    {
        if (input == null)
            return false;

        return
            (
                AccuracyRadius == input.AccuracyRadius ||
                (AccuracyRadius != null &&
                 AccuracyRadius.Equals(input.AccuracyRadius))
            ) &&
            (
                Latitude == input.Latitude ||
                (Latitude != null &&
                 Latitude.Equals(input.Latitude))
            ) &&
            (
                Longitude == input.Longitude ||
                (Longitude != null &&
                 Longitude.Equals(input.Longitude))
            ) &&
            (
                PostalCode == input.PostalCode ||
                (PostalCode != null &&
                 PostalCode.Equals(input.PostalCode))
            ) &&
            (
                Timezone == input.Timezone ||
                (Timezone != null &&
                 Timezone.Equals(input.Timezone))
            ) &&
            (
                City == input.City ||
                (City != null &&
                 City.Equals(input.City))
            ) &&
            (
                Country == input.Country ||
                (Country != null &&
                 Country.Equals(input.Country))
            ) &&
            (
                Continent == input.Continent ||
                (Continent != null &&
                 Continent.Equals(input.Continent))
            ) &&
            (
                Subdivisions == input.Subdivisions ||
                (Subdivisions != null &&
                 input.Subdivisions != null &&
                 Subdivisions.SequenceEqual(input.Subdivisions))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(
        ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class IPLocation {\n");
        sb.Append("  AccuracyRadius: ").Append(AccuracyRadius).Append("\n");
        sb.Append("  Latitude: ").Append(Latitude).Append("\n");
        sb.Append("  Longitude: ").Append(Longitude).Append("\n");
        sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
        sb.Append("  Timezone: ").Append(Timezone).Append("\n");
        sb.Append("  City: ").Append(City).Append("\n");
        sb.Append("  Country: ").Append(Country).Append("\n");
        sb.Append("  Continent: ").Append(Continent).Append("\n");
        sb.Append("  Subdivisions: ").Append(Subdivisions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as IPLocation);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (AccuracyRadius != null)
                hashCode = hashCode * 59 + AccuracyRadius.GetHashCode();
            if (Latitude != null)
                hashCode = hashCode * 59 + Latitude.GetHashCode();
            if (Longitude != null)
                hashCode = hashCode * 59 + Longitude.GetHashCode();
            if (PostalCode != null)
                hashCode = hashCode * 59 + PostalCode.GetHashCode();
            if (Timezone != null)
                hashCode = hashCode * 59 + Timezone.GetHashCode();
            if (City != null)
                hashCode = hashCode * 59 + City.GetHashCode();
            if (Country != null)
                hashCode = hashCode * 59 + Country.GetHashCode();
            if (Continent != null)
                hashCode = hashCode * 59 + Continent.GetHashCode();
            if (Subdivisions != null)
                hashCode = hashCode * 59 + Subdivisions.GetHashCode();
            return hashCode;
        }
    }
}