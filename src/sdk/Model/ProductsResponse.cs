/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = sdk.Client.SwaggerDateConverter;

namespace sdk.Model
{
    /// <summary>
    /// Contains all the information from each activated product - Fingerprint Pro or Bot Detection
    /// </summary>
    [DataContract]
        public partial class ProductsResponse :  IEquatable<ProductsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsResponse" /> class.
        /// </summary>
        /// <param name="identification">identification.</param>
        /// <param name="botd">botd.</param>
        public ProductsResponse(ProductsResponseIdentification identification = default(ProductsResponseIdentification), ProductsResponseBotd botd = default(ProductsResponseBotd))
        {
            this.Identification = identification;
            this.Botd = botd;
        }
        
        /// <summary>
        /// Gets or Sets Identification
        /// </summary>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public ProductsResponseIdentification Identification { get; set; }

        /// <summary>
        /// Gets or Sets Botd
        /// </summary>
        [DataMember(Name="botd", EmitDefaultValue=false)]
        public ProductsResponseBotd Botd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductsResponse {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Botd: ").Append(Botd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductsResponse);
        }

        /// <summary>
        /// Returns true if ProductsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identification == input.Identification ||
                    (this.Identification != null &&
                    this.Identification.Equals(input.Identification))
                ) && 
                (
                    this.Botd == input.Botd ||
                    (this.Botd != null &&
                    this.Botd.Equals(input.Botd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                if (this.Botd != null)
                    hashCode = hashCode * 59 + this.Botd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
