/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace sdk.Model;

/// <summary>
///     Fields &#x60;lastTimestamp&#x60; and &#x60;paginationKey&#x60; added when &#x60;limit&#x60; or &#x60;before&#x60;
///     parameter provided and there is more data to show
/// </summary>
[DataContract]
public class Response : IEquatable<Response>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="Response" /> class.
    /// </summary>
    /// <param name="visitorId">visitorId (required).</param>
    /// <param name="visits">visits (required).</param>
    /// <param name="lastTimestamp">
    ///     When more results are available (e.g., you scanned 200 results using &#x60;limit&#x60;
    ///     parameter, but a total of 600 results are available), a special &#x60;lastTimestamp&#x60; top-level attribute is
    ///     added to the response. If you want to paginate the results further in the past, you should use the value of this
    ///     attribute..
    /// </param>
    /// <param name="paginationKey">Visit&#x27;s &#x60;requestId&#x60; of the last visit in the current page..</param>
    public Response(string visitorId = default, List<ResponseVisits> visits = default,
        long? lastTimestamp = default, string paginationKey = default)
    {
        // to ensure "visitorId" is required (not null)

        if (visitorId == null)
            throw new InvalidDataException("visitorId is a required property for Response and cannot be null");
        VisitorId = visitorId;
        // to ensure "visits" is required (not null)

        if (visits == null)
            throw new InvalidDataException("visits is a required property for Response and cannot be null");
        Visits = visits;

        LastTimestamp = lastTimestamp;
        PaginationKey = paginationKey;
    }

    /// <summary>
    ///     Gets or Sets VisitorId
    /// </summary>
    [DataMember(Name = "visitorId", EmitDefaultValue = false)]
    public string VisitorId { get; set; }

    /// <summary>
    ///     Gets or Sets Visits
    /// </summary>
    [DataMember(Name = "visits", EmitDefaultValue = false)]
    public List<ResponseVisits> Visits { get; set; }

    /// <summary>
    ///     When more results are available (e.g., you scanned 200 results using &#x60;limit&#x60; parameter, but a total of
    ///     600 results are available), a special &#x60;lastTimestamp&#x60; top-level attribute is added to the response. If
    ///     you want to paginate the results further in the past, you should use the value of this attribute.
    /// </summary>
    /// <value>
    ///     When more results are available (e.g., you scanned 200 results using &#x60;limit&#x60; parameter, but a total of
    ///     600 results are available), a special &#x60;lastTimestamp&#x60; top-level attribute is added to the response. If
    ///     you want to paginate the results further in the past, you should use the value of this attribute.
    /// </value>
    [DataMember(Name = "lastTimestamp", EmitDefaultValue = false)]
    public long? LastTimestamp { get; set; }

    /// <summary>
    ///     Visit&#x27;s &#x60;requestId&#x60; of the last visit in the current page.
    /// </summary>
    /// <value>Visit&#x27;s &#x60;requestId&#x60; of the last visit in the current page.</value>
    [DataMember(Name = "paginationKey", EmitDefaultValue = false)]
    public string PaginationKey { get; set; }

    /// <summary>
    ///     Returns true if Response instances are equal
    /// </summary>
    /// <param name="input">Instance of Response to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Response input)
    {
        if (input == null)
            return false;

        return
            (
                VisitorId == input.VisitorId ||
                (VisitorId != null &&
                 VisitorId.Equals(input.VisitorId))
            ) &&
            (
                Visits == input.Visits ||
                (Visits != null &&
                 input.Visits != null &&
                 Visits.SequenceEqual(input.Visits))
            ) &&
            (
                LastTimestamp == input.LastTimestamp ||
                (LastTimestamp != null &&
                 LastTimestamp.Equals(input.LastTimestamp))
            ) &&
            (
                PaginationKey == input.PaginationKey ||
                (PaginationKey != null &&
                 PaginationKey.Equals(input.PaginationKey))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(
        ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Response {\n");
        sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
        sb.Append("  Visits: ").Append(Visits).Append("\n");
        sb.Append("  LastTimestamp: ").Append(LastTimestamp).Append("\n");
        sb.Append("  PaginationKey: ").Append(PaginationKey).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Response);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (VisitorId != null)
                hashCode = hashCode * 59 + VisitorId.GetHashCode();
            if (Visits != null)
                hashCode = hashCode * 59 + Visits.GetHashCode();
            if (LastTimestamp != null)
                hashCode = hashCode * 59 + LastTimestamp.GetHashCode();
            if (PaginationKey != null)
                hashCode = hashCode * 59 + PaginationKey.GetHashCode();
            return hashCode;
        }
    }
}