/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace sdk.Model;

/// <summary>
///     ResponseVisits
/// </summary>
[DataContract]
public class ResponseVisits : IEquatable<ResponseVisits>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ResponseVisits" /> class.
    /// </summary>
    /// <param name="requestId">Unique identifier of the user&#x27;s identification request. (required).</param>
    /// <param name="browserDetails">browserDetails (required).</param>
    /// <param name="incognito">Flag if user used incognito session. (required).</param>
    /// <param name="ip">ip (required).</param>
    /// <param name="ipLocation">ipLocation (required).</param>
    /// <param name="timestamp">Timestamp of the event with millisecond precision in Unix time. (required).</param>
    /// <param name="time">Time expressed according to ISO 8601 in UTC format. (required).</param>
    /// <param name="url">Page URL from which identification request was sent. (required).</param>
    /// <param name="tag">A customer-provided value or an object that was sent with identification request. (required).</param>
    /// <param name="linkedId">A customer-provided id that was sent with identification request..</param>
    /// <param name="confidence">confidence (required).</param>
    /// <param name="visitorFound">Attribute represents if a visitor had been identified before. (required).</param>
    /// <param name="firstSeenAt">firstSeenAt (required).</param>
    /// <param name="lastSeenAt">lastSeenAt (required).</param>
    public ResponseVisits(string requestId = default,
        BrowserDetails browserDetails = default, bool? incognito = default,
        string ip = default, IPLocation ipLocation = default, long? timestamp = default,
        DateTime? time = default, string url = default,
        Dictionary<string, object> tag = default, string linkedId = default,
        Confidence confidence = default, bool? visitorFound = default,
        StSeenAt firstSeenAt = default, StSeenAt lastSeenAt = default)
    {
        // to ensure "requestId" is required (not null)

        if (requestId == null)
            throw new InvalidDataException(
                "requestId is a required property for ResponseVisits and cannot be null");
        RequestId = requestId;
        // to ensure "browserDetails" is required (not null)

        if (browserDetails == null)
            throw new InvalidDataException(
                "browserDetails is a required property for ResponseVisits and cannot be null");
        BrowserDetails = browserDetails;
        // to ensure "incognito" is required (not null)

        if (incognito == null)
            throw new InvalidDataException(
                "incognito is a required property for ResponseVisits and cannot be null");
        Incognito = incognito;
        // to ensure "ip" is required (not null)

        if (ip == null)
            throw new InvalidDataException("ip is a required property for ResponseVisits and cannot be null");
        Ip = ip;
        // to ensure "ipLocation" is required (not null)

        if (ipLocation == null)
            throw new InvalidDataException(
                "ipLocation is a required property for ResponseVisits and cannot be null");
        IpLocation = ipLocation;
        // to ensure "timestamp" is required (not null)

        if (timestamp == null)
            throw new InvalidDataException(
                "timestamp is a required property for ResponseVisits and cannot be null");
        Timestamp = timestamp;
        // to ensure "time" is required (not null)

        if (time == null)
            throw new InvalidDataException("time is a required property for ResponseVisits and cannot be null");
        Time = time;
        // to ensure "url" is required (not null)

        if (url == null)
            throw new InvalidDataException("url is a required property for ResponseVisits and cannot be null");
        Url = url;
        // to ensure "tag" is required (not null)

        if (tag == null)
            throw new InvalidDataException("tag is a required property for ResponseVisits and cannot be null");
        Tag = tag;
        // to ensure "confidence" is required (not null)

        if (confidence == null)
            throw new InvalidDataException(
                "confidence is a required property for ResponseVisits and cannot be null");
        Confidence = confidence;
        // to ensure "visitorFound" is required (not null)

        if (visitorFound == null)
            throw new InvalidDataException(
                "visitorFound is a required property for ResponseVisits and cannot be null");
        VisitorFound = visitorFound;
        // to ensure "firstSeenAt" is required (not null)

        if (firstSeenAt == null)
            throw new InvalidDataException(
                "firstSeenAt is a required property for ResponseVisits and cannot be null");
        FirstSeenAt = firstSeenAt;
        // to ensure "lastSeenAt" is required (not null)

        if (lastSeenAt == null)
            throw new InvalidDataException(
                "lastSeenAt is a required property for ResponseVisits and cannot be null");
        LastSeenAt = lastSeenAt;

        LinkedId = linkedId;
    }

    /// <summary>
    ///     Unique identifier of the user&#x27;s identification request.
    /// </summary>
    /// <value>Unique identifier of the user&#x27;s identification request.</value>
    [DataMember(Name = "requestId", EmitDefaultValue = false)]
    public string RequestId { get; set; }

    /// <summary>
    ///     Gets or Sets BrowserDetails
    /// </summary>
    [DataMember(Name = "browserDetails", EmitDefaultValue = false)]
    public BrowserDetails BrowserDetails { get; set; }

    /// <summary>
    ///     Flag if user used incognito session.
    /// </summary>
    /// <value>Flag if user used incognito session.</value>
    [DataMember(Name = "incognito", EmitDefaultValue = false)]
    public bool? Incognito { get; set; }

    /// <summary>
    ///     Gets or Sets Ip
    /// </summary>
    [DataMember(Name = "ip", EmitDefaultValue = false)]
    public string Ip { get; set; }

    /// <summary>
    ///     Gets or Sets IpLocation
    /// </summary>
    [DataMember(Name = "ipLocation", EmitDefaultValue = false)]
    public IPLocation IpLocation { get; set; }

    /// <summary>
    ///     Timestamp of the event with millisecond precision in Unix time.
    /// </summary>
    /// <value>Timestamp of the event with millisecond precision in Unix time.</value>
    [DataMember(Name = "timestamp", EmitDefaultValue = false)]
    public long? Timestamp { get; set; }

    /// <summary>
    ///     Time expressed according to ISO 8601 in UTC format.
    /// </summary>
    /// <value>Time expressed according to ISO 8601 in UTC format.</value>
    [DataMember(Name = "time", EmitDefaultValue = false)]
    public DateTime? Time { get; set; }

    /// <summary>
    ///     Page URL from which identification request was sent.
    /// </summary>
    /// <value>Page URL from which identification request was sent.</value>
    [DataMember(Name = "url", EmitDefaultValue = false)]
    public string Url { get; set; }

    /// <summary>
    ///     A customer-provided value or an object that was sent with identification request.
    /// </summary>
    /// <value>A customer-provided value or an object that was sent with identification request.</value>
    [DataMember(Name = "tag", EmitDefaultValue = false)]
    public Dictionary<string, object> Tag { get; set; }

    /// <summary>
    ///     A customer-provided id that was sent with identification request.
    /// </summary>
    /// <value>A customer-provided id that was sent with identification request.</value>
    [DataMember(Name = "linkedId", EmitDefaultValue = false)]
    public string LinkedId { get; set; }

    /// <summary>
    ///     Gets or Sets Confidence
    /// </summary>
    [DataMember(Name = "confidence", EmitDefaultValue = false)]
    public Confidence Confidence { get; set; }

    /// <summary>
    ///     Attribute represents if a visitor had been identified before.
    /// </summary>
    /// <value>Attribute represents if a visitor had been identified before.</value>
    [DataMember(Name = "visitorFound", EmitDefaultValue = false)]
    public bool? VisitorFound { get; set; }

    /// <summary>
    ///     Gets or Sets FirstSeenAt
    /// </summary>
    [DataMember(Name = "firstSeenAt", EmitDefaultValue = false)]
    public StSeenAt FirstSeenAt { get; set; }

    /// <summary>
    ///     Gets or Sets LastSeenAt
    /// </summary>
    [DataMember(Name = "lastSeenAt", EmitDefaultValue = false)]
    public StSeenAt LastSeenAt { get; set; }

    /// <summary>
    ///     Returns true if ResponseVisits instances are equal
    /// </summary>
    /// <param name="input">Instance of ResponseVisits to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ResponseVisits input)
    {
        if (input == null)
            return false;

        return
            (
                RequestId == input.RequestId ||
                (RequestId != null &&
                 RequestId.Equals(input.RequestId))
            ) &&
            (
                BrowserDetails == input.BrowserDetails ||
                (BrowserDetails != null &&
                 BrowserDetails.Equals(input.BrowserDetails))
            ) &&
            (
                Incognito == input.Incognito ||
                (Incognito != null &&
                 Incognito.Equals(input.Incognito))
            ) &&
            (
                Ip == input.Ip ||
                (Ip != null &&
                 Ip.Equals(input.Ip))
            ) &&
            (
                IpLocation == input.IpLocation ||
                (IpLocation != null &&
                 IpLocation.Equals(input.IpLocation))
            ) &&
            (
                Timestamp == input.Timestamp ||
                (Timestamp != null &&
                 Timestamp.Equals(input.Timestamp))
            ) &&
            (
                Time == input.Time ||
                (Time != null &&
                 Time.Equals(input.Time))
            ) &&
            (
                Url == input.Url ||
                (Url != null &&
                 Url.Equals(input.Url))
            ) &&
            (
                Tag == input.Tag ||
                (Tag != null &&
                 input.Tag != null &&
                 Tag.SequenceEqual(input.Tag))
            ) &&
            (
                LinkedId == input.LinkedId ||
                (LinkedId != null &&
                 LinkedId.Equals(input.LinkedId))
            ) &&
            (
                Confidence == input.Confidence ||
                (Confidence != null &&
                 Confidence.Equals(input.Confidence))
            ) &&
            (
                VisitorFound == input.VisitorFound ||
                (VisitorFound != null &&
                 VisitorFound.Equals(input.VisitorFound))
            ) &&
            (
                FirstSeenAt == input.FirstSeenAt ||
                (FirstSeenAt != null &&
                 FirstSeenAt.Equals(input.FirstSeenAt))
            ) &&
            (
                LastSeenAt == input.LastSeenAt ||
                (LastSeenAt != null &&
                 LastSeenAt.Equals(input.LastSeenAt))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(
        ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ResponseVisits {\n");
        sb.Append("  RequestId: ").Append(RequestId).Append("\n");
        sb.Append("  BrowserDetails: ").Append(BrowserDetails).Append("\n");
        sb.Append("  Incognito: ").Append(Incognito).Append("\n");
        sb.Append("  Ip: ").Append(Ip).Append("\n");
        sb.Append("  IpLocation: ").Append(IpLocation).Append("\n");
        sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
        sb.Append("  Time: ").Append(Time).Append("\n");
        sb.Append("  Url: ").Append(Url).Append("\n");
        sb.Append("  Tag: ").Append(Tag).Append("\n");
        sb.Append("  LinkedId: ").Append(LinkedId).Append("\n");
        sb.Append("  Confidence: ").Append(Confidence).Append("\n");
        sb.Append("  VisitorFound: ").Append(VisitorFound).Append("\n");
        sb.Append("  FirstSeenAt: ").Append(FirstSeenAt).Append("\n");
        sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ResponseVisits);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (RequestId != null)
                hashCode = hashCode * 59 + RequestId.GetHashCode();
            if (BrowserDetails != null)
                hashCode = hashCode * 59 + BrowserDetails.GetHashCode();
            if (Incognito != null)
                hashCode = hashCode * 59 + Incognito.GetHashCode();
            if (Ip != null)
                hashCode = hashCode * 59 + Ip.GetHashCode();
            if (IpLocation != null)
                hashCode = hashCode * 59 + IpLocation.GetHashCode();
            if (Timestamp != null)
                hashCode = hashCode * 59 + Timestamp.GetHashCode();
            if (Time != null)
                hashCode = hashCode * 59 + Time.GetHashCode();
            if (Url != null)
                hashCode = hashCode * 59 + Url.GetHashCode();
            if (Tag != null)
                hashCode = hashCode * 59 + Tag.GetHashCode();
            if (LinkedId != null)
                hashCode = hashCode * 59 + LinkedId.GetHashCode();
            if (Confidence != null)
                hashCode = hashCode * 59 + Confidence.GetHashCode();
            if (VisitorFound != null)
                hashCode = hashCode * 59 + VisitorFound.GetHashCode();
            if (FirstSeenAt != null)
                hashCode = hashCode * 59 + FirstSeenAt.GetHashCode();
            if (LastSeenAt != null)
                hashCode = hashCode * 59 + LastSeenAt.GetHashCode();
            return hashCode;
        }
    }
}