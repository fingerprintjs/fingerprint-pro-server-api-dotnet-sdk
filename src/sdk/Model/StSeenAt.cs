/* 
 * Fingerprint Pro Server API
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace sdk.Model;

/// <summary>
///     StSeenAt
/// </summary>
[DataContract]
public class StSeenAt : IEquatable<StSeenAt>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="StSeenAt" /> class.
    /// </summary>
    /// <param name="global">global (required).</param>
    /// <param name="subscription">subscription (required).</param>
    public StSeenAt(DateTime? global = default, DateTime? subscription = default)
    {
    }

    /// <summary>
    ///     Gets or Sets Global
    /// </summary>
    [DataMember(Name = "global", EmitDefaultValue = false)]
    public DateTime? Global { get; set; }

    /// <summary>
    ///     Gets or Sets Subscription
    /// </summary>
    [DataMember(Name = "subscription", EmitDefaultValue = false)]
    public DateTime? Subscription { get; set; }

    /// <summary>
    ///     Returns true if StSeenAt instances are equal
    /// </summary>
    /// <param name="input">Instance of StSeenAt to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(StSeenAt input)
    {
        if (input == null)
            return false;

        return
            (
                Global == input.Global ||
                (Global != null &&
                 Global.Equals(input.Global))
            ) &&
            (
                Subscription == input.Subscription ||
                (Subscription != null &&
                 Subscription.Equals(input.Subscription))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(
        ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class StSeenAt {\n");
        sb.Append("  Global: ").Append(Global).Append("\n");
        sb.Append("  Subscription: ").Append(Subscription).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as StSeenAt);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Global != null)
                hashCode = hashCode * 59 + Global.GetHashCode();
            if (Subscription != null)
                hashCode = hashCode * 59 + Subscription.GetHashCode();
            return hashCode;
        }
    }
}