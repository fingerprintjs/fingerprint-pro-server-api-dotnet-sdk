/// <summary>
    /// {{#description}}{{{.}}}{{/description}}{{^description}}{{classname}}{{/description}}
    /// </summary>
[DataContract]
{{#discriminator}}
    [JsonConverter(typeof(JsonSubtypes), "{{discriminator.propertyName}}")]{{#children}}
        [JsonSubtypes.KnownSubType(typeof({{classname}}), "{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}")]{{/children}}
{{/discriminator}}
{{#generatePropertyChanged}}
    [ImplementPropertyChanged]
{{/generatePropertyChanged}}
{{>visibility}} class {{classname}} : {{#parent}}{{{parent}}}, {{/parent}} IEquatable<{{classname}}>{{^netStandard}}{{/netStandard}}
{
{{#vars}}
    {{#items.isEnum}}
        {{#items}}
            {{^complexType}}
                {{>modelInnerEnum}}
            {{/complexType}}
        {{/items}}
    {{/items.isEnum}}
    {{#isEnum}}
        {{^complexType}}
            {{>modelInnerEnum}}
        {{/complexType}}
    {{/isEnum}}
    {{#isEnum}}
        /// <summary>
            /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
            /// </summary>
        {{#description}}
            /// <value>{{{description}}}</value>
        {{/description}}
        [DataMember(Name="{{baseName}}", EmitDefaultValue={{emitDefaultValue}})]
        [JsonPropertyName("{{baseName}}")]
        public {{#complexType}}{{{complexType}}}{{/complexType}}{{^complexType}}{{{datatypeWithEnum}}}{{/complexType}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}} {{name}} { get; set; }
    {{/isEnum}}
{{/vars}}


{{#hasRequired}}
    {{^hasOnlyReadOnly}}
        /// <summary>
            /// Initializes a new instance of the <see cref="{{classname}}" /> class.
            /// </summary>
        [JsonConstructor]
        protected {{classname}}() { }
    {{/hasOnlyReadOnly}}
{{/hasRequired}}
/// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}" /> class.
    /// </summary>
{{#vars}}
    {{^isReadOnly}}
        /// <param name="{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}}">{{#description}}{{{description}}}{{/description}}{{^description}}{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}}{{/description}}{{#required}} (required){{/required}}{{#defaultValue}} (default to {{defaultValue}}){{/defaultValue}}.</param>
    {{/isReadOnly}}
{{/vars}}
{{#hasOnlyReadOnly}}
    [JsonConstructor]
{{/hasOnlyReadOnly}}
public {{classname}}({{#readWriteVars}}{{#datatypeWithEnum}}{{/datatypeWithEnum}}{{{datatypeWithEnum}}}{{^datatypeWithEnum}}object{{/datatypeWithEnum}}{{#isEnum}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}}{{/isEnum}} {{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}{{#datatypeWithEnum}}default({{{datatypeWithEnum}}}{{#isEnum}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}}{{/isEnum}}){{/datatypeWithEnum}}{{/defaultValue}}{{^datatypeWithEnum}}null{{/datatypeWithEnum}}{{^@last}}, {{/@last}}{{/readWriteVars}}){{#parent}} : base({{#parentVars}}{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}}{{#hasMore}}, {{/hasMore}}{{/parentVars}}){{/parent}}
{
{{#vars}}
    {{^isInherited}}
        {{^isReadOnly}}
            {{#required}}
                {{^nullable}}
                    // to ensure "{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}}" is required (not null)
                    // swagger debug: {{classname}} {{name}}

                    if ({{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}} == null)
                    {
                    throw new InvalidDataException("{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}} is a required property for {{classname}} and cannot be null");
                    }
                    else
                    {
                    this.{{name}} = {{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}};
                    }
                {{/nullable}}
                {{#nullable}}
                    this.{{name}} = {{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}};
                {{/nullable}}
            {{/required}}
        {{/isReadOnly}}
    {{/isInherited}}
{{/vars}}
{{#vars}}
    {{^isInherited}}
        {{^isReadOnly}}
            {{^required}}
                {{#defaultValue}}// use default value if no "{{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}}" provided
                if ({{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}} == null)
                {
                this.{{name}} = {{{defaultValue}}};
                }
                else
                {
                this.{{name}} = {{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}};
                }
                {{/defaultValue}}
                {{^defaultValue}}
                    this.{{name}} = {{#lambda.camelcase_param}}{{name}}{{/lambda.camelcase_param}};
                {{/defaultValue}}
            {{/required}}
        {{/isReadOnly}}
    {{/isInherited}}
{{/vars}}
}

{{#vars}}
    {{^isInherited}}
        {{^isEnum}}
            /// <summary>
                /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
                /// </summary>{{#description}}
                /// <value>{{{description}}}</value>{{/description}}
            [DataMember(Name="{{baseName}}", EmitDefaultValue={{emitDefaultValue}})]
            [JsonPropertyName("{{baseName}}")]{{#isDate}}
                [JsonConverter(typeof(SwaggerDateConverter))]{{/isDate}}
            public {{#datatype}}{{/datatype}}{{{datatype}}}{{^datatype}}object{{/datatype}} {{name}} { get; {{#isReadOnly}}private {{/isReadOnly}}set; }
        {{/isEnum}}
    {{/isInherited}}

{{/vars}}
/// <summary>
    /// Returns the string presentation of the object
    /// </summary>
/// <returns>String presentation of the object</returns>
public override string ToString()
{
var sb = new StringBuilder();
sb.Append("class {{classname}} {\n");
{{#parent}}
    sb.Append("  ").Append(base.ToString()!.Replace("\n", "\n  ")).Append("\n");
{{/parent}}
{{#vars}}
    sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
{{/vars}}
sb.Append("}\n");
return sb.ToString();
}

/// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
/// <returns>JSON string presentation of the object</returns>
public {{#parent}}{{^isArrayModel}}override {{/isArrayModel}}{{/parent}}{{^parent}}virtual {{/parent}}string ToJson()
{
return JsonUtils.Serialize(this);
}

/// <summary>
    /// Returns true if {{classname}} instances are equal
    /// </summary>
/// <param name="input">Instance of {{classname}} to be compared</param>
/// <returns>Boolean</returns>
public bool Equals({{classname}}? input)
{
if (input == null)
return false;

return {{#vars}}{{#parent}}base.Equals(input) && {{/parent}}{{#isNotContainer}}
    (
    this.{{name}} == input.{{name}} ||
    (this.{{name}} != null &&
    this.{{name}}.Equals(input.{{name}}))
    ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{^isNotContainer}}
    (
    this.{{name}} == input.{{name}} ||
    this.{{name}} != null &&
    input.{{name}} != null &&
    this.{{name}}.SequenceEqual(input.{{name}})
    ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{/vars}}{{^vars}}{{#parent}}base.Equals(input){{/parent}}{{^parent}}false{{/parent}}{{/vars}};
}

/// <summary>
    /// Gets the hash code
    /// </summary>
/// <returns>Hash code</returns>
public override int GetHashCode()
{
unchecked // Overflow is fine, just wrap
{
{{#parent}}
    int hashCode = base.GetHashCode();
{{/parent}}
{{^parent}}
    int hashCode = 41;
{{/parent}}
{{#vars}}
    if (this.{{name}} != null)
    hashCode = hashCode * 59 + this.{{name}}.GetHashCode();
{{/vars}}
return hashCode;
}
}
{{^netStandard}}

    {{#generatePropertyChanged}}
        /// <summary>
            /// Property changed event handler
            /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
            /// Trigger when a property changed
            /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
        // NOTE: property changed is handled via "code weaving" using Fody.
        // Properties with setters are modified at compile time to notify of changes.
        var propertyChanged = PropertyChanged;
        if (propertyChanged != null)
        {
        propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
        }

    {{/generatePropertyChanged}}
{{/netStandard}}
    }
